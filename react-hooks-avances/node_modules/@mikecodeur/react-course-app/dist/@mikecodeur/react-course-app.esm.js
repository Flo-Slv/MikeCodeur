import React, { useState, useEffect } from 'react';
import ReactDOM from 'react-dom';
import { createBrowserHistory } from 'history';
import { setupWorker } from 'msw';
import { setupServer } from 'msw/node';
import { match } from 'node-match-path';
import { jsx, Global } from '@emotion/core';
import facepaint from 'facepaint';
import { ThemeProvider as ThemeProvider$1, useTheme as useTheme$1 } from 'emotion-theming';
import { ErrorBoundary } from 'react-error-boundary';
import { Link, Router, Switch, Route, useParams } from 'react-router-dom';
import { Tabs, TabPanels, TabPanel } from '@reach/tabs';
import { makeStyles, createStyles, useTheme, alpha, createTheme, ThemeProvider } from '@material-ui/core/styles';
import Button from '@material-ui/core/Button';
import TabsMui from '@material-ui/core/Tabs';
import TabMui from '@material-ui/core/Tab';
import Tooltip from '@material-ui/core/Tooltip';
import Alert from '@material-ui/lab/Alert';
import AlertTitle from '@material-ui/lab/AlertTitle';
import { RiArrowLeftSLine, RiArrowRightSLine } from 'react-icons/ri';
import { MdLaptop, MdCheckCircle, MdFormatListBulleted, MdDns } from 'react-icons/md';
import Divider from '@material-ui/core/Divider';
import Stepper from '@material-ui/core/Stepper';
import Step from '@material-ui/core/Step';
import StepContent from '@material-ui/core/StepContent';
import Paper from '@material-ui/core/Paper';
import Typography from '@material-ui/core/Typography';
import StepButton from '@material-ui/core/StepButton';
import CheckCircleIcon from '@material-ui/icons/CheckCircle';
import FormatListBulletedIcon from '@material-ui/icons/FormatListBulleted';
import Radio from '@material-ui/core/Radio';
import Fab from '@material-ui/core/Fab';
import ReactCanvasConfetti from 'react-canvas-confetti';
import Accordion from '@material-ui/core/Accordion';
import AccordionDetails from '@material-ui/core/AccordionDetails';
import AccordionSummary from '@material-ui/core/AccordionSummary';
import ExpandMoreIcon from '@material-ui/icons/ExpandMore';
import Prism from 'prismjs';
import AppBar from '@material-ui/core/AppBar';
import Toolbar from '@material-ui/core/Toolbar';
import IconButton from '@material-ui/core/IconButton';
import MenuItem from '@material-ui/core/MenuItem';
import Menu from '@material-ui/core/Menu';
import MoreIcon from '@material-ui/icons/MoreVert';
import SwitchMui from '@material-ui/core/Switch';
import _extends from '@babel/runtime/helpers/esm/extends';
import LinearProgress from '@material-ui/core/LinearProgress';
import Box from '@material-ui/core/Box';

const getKey = name => `__react_course_app_${name}__`;

function getDefaultDelay() {
  const variableTime = ls(getKey('variable_request_time'), 400);
  const minTime = ls(getKey('min_request_time'), 400);
  return Math.random() * variableTime + minTime;
}

function sleep(t = getDefaultDelay()) {
  return new Promise(resolve => {
    if (process.env.NODE_ENV === 'test') {
      resolve();
    } else {
      setTimeout(resolve, t);
    }
  });
}

function ls(key, defaultVal) {
  const lsVal = window.localStorage.getItem(key);
  let val;

  if (lsVal) {
    val = Number(lsVal);
  }

  return typeof val !== 'undefined' && Number.isFinite(val) ? val : defaultVal;
}

const server = {};

function setup({
  handlers
}) {
  const enhancedHandlers = handlers.map(handler => {
    // @ts-expect-error it's protected but.....
    const originalResolver = handler.resolver;

    const enhancedResolver = async (req, res, ctx) => {
      try {
        if (shouldFail(req)) {
          throw new Error('Request failure (for testing purposes).');
        }

        const result = await originalResolver(req, res, ctx);
        return result;
      } catch (error) {
        // @ts-expect-error handling the error case... ugh...
        const status = error.status || 500;
        return await res(ctx.status(status), // @ts-expect-error res is expecting transformers<unknown>
        // and ctx.json is giving a specific one...
        ctx.json({
          status,
          message: error.message || 'Unknown Error'
        }));
      } finally {
        let delay;

        if (req.headers.has('delay')) {
          delay = Number(req.headers.get('delay'));
        }

        await sleep(delay);
      }
    }; // @ts-expect-error not sure of a reasonable way to do this otherwise...


    handler.resolver = enhancedResolver;
    return handler;
  });

  if (process.env.NODE_ENV === 'test') {
    Object.assign(server, setupServer(...enhancedHandlers));
    return server;
  } else {
    Object.assign(server, setupWorker(...enhancedHandlers));
    return server;
  }
}

function shouldFail(req) {
  var _req$body, _window$localStorage$;

  if (JSON.stringify((_req$body = req.body) != null ? _req$body : {}).includes('FAIL')) return true;
  if (req.url.searchParams.toString().includes('FAIL')) return true;
  const failureRate = Number((_window$localStorage$ = window.localStorage.getItem(getKey('failure_rate'))) != null ? _window$localStorage$ : 0);
  if (Math.random() < failureRate) return true;
  if (requestMatchesFailConfig(req)) return true;
  return false;
}

function requestMatchesFailConfig(req) {
  function configMatches({
    requestMethod,
    urlMatch
  }) {
    return (requestMethod === 'ALL' || req.method === requestMethod) && match(urlMatch, req.url.pathname).matches;
  }

  try {
    var _window$localStorage$2;

    const failConfig = JSON.parse((_window$localStorage$2 = window.localStorage.getItem(getKey('request_fail_config'))) != null ? _window$localStorage$2 : '[]');
    return failConfig.some(configMatches);
  } catch (error) {
    window.localStorage.removeItem(getKey('request_fail_config'));
  }

  return false;
}
/*
eslint
  @typescript-eslint/no-unsafe-assignment: "off",
*/

const QCM_RESULT$1 = 'QcmResult';
const QCM_CURRENT_PROJECT_ID = 'QCM_CURRENT_PROJECT_ID';
const QCM_FINISH_ICON_COLOR = 'green';
const QCM_NOT_FINISH_ICON_COLOR = 'grey';

function useLocalStorage(key, initialValue) {
  // State to store our value
  // Pass initial state function to useState so logic is only executed once
  const [storedValue, setStoredValue] = useState(() => {
    try {
      // Get from local storage by key
      const item = window.localStorage.getItem(key); // Parse stored json or if none return initialValue

      return item ? JSON.parse(item) : initialValue;
    } catch (error) {
      // If error also return initialValue
      //console.log(error);
      return initialValue;
    }
  }); // Return a wrapped version of useState's setter function that ...
  // ... persists the new value to localStorage.

  const setValue = value => {
    try {
      //console.log("valuess",value)
      // Allow value to be a function so we have same API as useState
      const valueToStore = value instanceof Function ? value(storedValue) : value; // Save state

      setStoredValue(valueToStore); // Save to local storage

      window.localStorage.setItem(key, JSON.stringify(valueToStore));
    } catch (error) {// A more advanced implementation would handle the error case
      //console.log(error);
    }
  };

  return [storedValue, setValue];
}

const useStyles$5 = makeStyles(theme => createStyles({
  root: {
    width: '100%'
  },
  button: {
    marginTop: theme.spacing(1),
    marginRight: theme.spacing(1)
  },
  actionsContainer: {
    marginBottom: theme.spacing(2)
  },
  resetContainer: {
    padding: theme.spacing(3)
  },
  buttonNavTextWrap: {
    marginTop: theme.spacing(1),
    marginRight: theme.spacing(1),
    maxWidth: '250px',
    whiteSpace: 'nowrap',
    overflow: 'hidden',
    textOverflow: 'ellipsis'
  },
  labelNavTextWrap: {
    maxWidth: '100%',
    whiteSpace: 'nowrap',
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    [theme.breakpoints.down('xs')]: {
      maxWidth: '70px'
      /* backgroundColor:"red",
      whiteSpace: 'nowrap',
      overflow: 'hidden',
      textOverflow: 'ellipsis',*/

    } // [theme.breakpoints.down('sm')]: {
    //   maxWidth: '100%',
    //   backgroundColor:"red",
    // },
    // [theme.breakpoints.up('md')]: {
    //   maxWidth: '90px',
    //   backgroundColor:"blue",
    // },
    // [theme.breakpoints.up('lg')]: {
    //   maxWidth: '100%',
    //   backgroundColor:"green",
    // },

  } // stepButton: {
  //   '&:hover': {
  //     color: '#f00',
  //   },
  // },

}));

function getStepContentExerciseInfo(exerciseInfo) {
  const content = `Exercice : ${exerciseInfo.description}. `;
  return content;
}

function VerticalLinearStepper(props) {
  //export default function VerticalLinearStepper(exerciseInfo: Array<ExerciseInfo>): React.ReactElement {
  const steps = props.exerciseInfo;
  const classes = useStyles$5();
  const [activeStep, setActiveStep] = React.useState(0);
  const [completed
  /*, setCompleted*/
  ] = React.useState({}); //const steps = exerciseInfoStep//getSteps(/*exerciseInfo*/);
  //const [projectId] = useLocalStorage<string>(QCM_CURRENT_PROJECT_ID, '');

  const projectId = window.localStorage.getItem(QCM_CURRENT_PROJECT_ID);
  const [qcmAllResults, setQcmAllResults] = useLocalStorage(`${QCM_RESULT$1}-${projectId}`, []);

  const totalSteps = () => {
    return steps.length;
  };

  const completedSteps = () => {
    return Object.keys(completed).length;
  };

  const isLastStep = () => {
    return activeStep === totalSteps() - 1;
  };

  const allStepsCompleted = () => {
    return completedSteps() === totalSteps();
  };

  const handleNext = () => {
    const newActiveStep = isLastStep() && !allStepsCompleted() ? // It's the last step, but not all steps have been completed,
    // find the first step that has been completed
    steps.findIndex((step, i) => !(i in completed)) : activeStep + 1;
    setActiveStep(newActiveStep); //console.log('newActiveStep', newActiveStep)
  };

  const handleBack = () => {
    setActiveStep(prevActiveStep => prevActiveStep - 1);
  };

  const handleStep = step => () => {
    setActiveStep(step);
  };

  const handleReset = () => {
    setActiveStep(0);
    setQcmAllResults([]);
  };

  const isExerciceQCMValidate = exerciceID => {
    //console.log('qcmAllResults', qcmAllResults)
    return !!qcmAllResults.find(res => res.exerciseId == exerciceID);
  };

  return /*#__PURE__*/React.createElement("div", {
    className: classes.root
  }, /*#__PURE__*/React.createElement(Stepper, {
    nonLinear: true,
    activeStep: activeStep,
    orientation: "vertical"
  }, steps.filter(Boolean).map((
  /*{id, number, title, final, exercise}*/
  exercise, index) => {
    var _exercise$exercise$, _exercise$final$;

    return /*#__PURE__*/React.createElement(Step, {
      key: index
    }, /*#__PURE__*/React.createElement(Tooltip, {
      title: getStepContentExerciseInfo(exercise)
    }, /*#__PURE__*/React.createElement(StepButton, {
      onClick: handleStep(index),
      completed: completed[index]
    }, exercise.title)), /*#__PURE__*/React.createElement(StepContent, null, /*#__PURE__*/React.createElement(Typography, {
      variant: "h6"
    }, getStepContentExerciseInfo(exercise)), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("div", {
      className: classes.actionsContainer
    }, isExerciceQCMValidate(exercise.id) ? /*#__PURE__*/React.createElement(Typography, null, /*#__PURE__*/React.createElement(CheckCircleIcon, {
      style: {
        color: QCM_FINISH_ICON_COLOR
      }
    }), "\xA0 Bravo cet exercice est termin\xE9") : /*#__PURE__*/React.createElement(Tooltip, {
      title: 'Pour le valider, suis le cours et valide le QCM'
    }, /*#__PURE__*/React.createElement(Typography, null, /*#__PURE__*/React.createElement(CheckCircleIcon, {
      style: {
        color: QCM_NOT_FINISH_ICON_COLOR
        /*'red'*/

      }
    }), "\xA0 Cet exercice n'a pas encore \xE9t\xE9 valid\xE9")), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("div", {
      style: {
        display: 'flex',
        justifyContent: 'flex-start'
      }
    }, /*#__PURE__*/React.createElement(Link, {
      to: `/${exercise.number}`,
      style: {
        color: 'inherit',
        textDecoration: 'none'
      }
    }, /*#__PURE__*/React.createElement(Button, {
      variant: "contained",
      color: "primary",
      className: classes.button
      /*NavTextWrap*/

    }, /*#__PURE__*/React.createElement("div", {
      className: classes.labelNavTextWrap
    }, "Acc\xE9der \xE0 l'exercice"))), /*#__PURE__*/React.createElement("a", {
      href: (_exercise$exercise$ = exercise.exercise[0]) == null ? void 0 : _exercise$exercise$.isolatedPath,
      title: "Voir le rendu de l'exercice",
      style: {
        color: 'inherit',
        textDecoration: 'none',
        marginLeft: 'auto'
      }
    }, /*#__PURE__*/React.createElement(Button, {
      variant: "contained",
      color: "primary",
      className: classes.button,
      style: {
        marginLeft: 'auto'
      }
    }, /*#__PURE__*/React.createElement("div", {
      className: classes.labelNavTextWrap
    }, "R\xE9sultat"))), /*#__PURE__*/React.createElement("a", {
      href: (_exercise$final$ = exercise.final[0]) == null ? void 0 : _exercise$final$.isolatedPath,
      title: "Voir la solution",
      style: {
        color: 'inherit',
        textDecoration: 'none'
      }
    }, /*#__PURE__*/React.createElement(Button, {
      variant: "contained",
      color: "secondary",
      className: classes.button
    }, /*#__PURE__*/React.createElement("div", {
      className: classes.labelNavTextWrap
    }, "Solution")))), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Button, {
      variant: "outlined",
      disabled: activeStep === 0,
      onClick: handleBack,
      className: classes.button
    }, '< Exercice précédent'), /*#__PURE__*/React.createElement(Button, {
      variant: "outlined",
      onClick: handleNext,
      className: classes.button
    }, activeStep === steps.length - 1 ? 'Fin' : 'Exercice suivant >')))));
  })), activeStep === steps.length - 1 && /*#__PURE__*/React.createElement(Paper, {
    square: true,
    elevation: 0,
    className: classes.resetContainer
  }, /*#__PURE__*/React.createElement(Typography, null, "Tous les exercices sont finis - Tu'as fini"), /*#__PURE__*/React.createElement(Button, {
    variant: "outlined",
    onClick: handleReset,
    className: classes.button
  }, "Recommencer"), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement(Typography, null, "(cela va vider l'historique des QCM)")));
}

function Fireworks({
  autoFire
}) {
  const [fire, setFire] = useState({});
  const [reset
  /*, setReset*/
  ] = useState({});
  const [count, setCount] = useState(0);
  const [started, setStarted] = useState(false);
  const MAX = 4;

  const randomInRange = (min, max) => {
    return Math.random() * (max - min) + min;
  }; //console.log('autoFire',autoFire)


  const getAnimationSettings = (originXA, originXB) => {
    return {
      startVelocity: 30,
      spread: 1000,
      ticks: 60,
      zIndex: 0,
      particleCount: 350,
      origin: {
        x: randomInRange(originXA, originXB),
        y: Math.random() - 0.2
      }
    };
  };

  if (autoFire && !started) {
    setFire(getAnimationSettings(0.1, 0.9));
    setStarted(true);
  }

  const onFire = () => {
    //console.log('do something after fire')
    setCount(count + 1);
  };

  const onReset = () => {//console.log('do something after reset')
  };

  const onDecay = () => {
    //console.log('do something after animation')
    if (count <= MAX) {
      setFire(getAnimationSettings(0.1, 0.9));
    } else {
      setCount(0);
    }
  };

  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ReactCanvasConfetti, {
    fire: fire,
    reset: reset // set the callback on new animation
    ,
    onFire: onFire // set the callback on decay animation
    ,
    onDecay: onDecay // set the callback on reset canvas
    ,
    onReset: onReset,
    style: {
      position: 'fixed',
      pointerEvents: 'none',
      width: '100%',
      height: '100%',
      top: 0,
      left: 0
    }
  }));
}

const QCM_RESULT = 'QcmResult';
const useStyles$4 = makeStyles(theme => createStyles({
  root: {
    paddingTop: 16,
    paddingBottom: 16,
    marginTop: theme.spacing.length * 3,
    width: '95%',
    margin: '0 auto',
    [theme.breakpoints.up('md')]: {
      width: '60%'
    },
    [theme.breakpoints.up('lg')]: {
      width: '40%'
    }
  },
  button: {
    pointerEvents: 'none',
    boxShadow: 'none'
  },
  questionMeta: {
    marginLeft: 10,
    display: 'inline'
  },
  footer: {
    display: 'flex',
    marginTop: '40px',
    flexWrap: 'wrap',
    flexDirection: 'row',
    justifyContent: 'flex-start'
  },
  answerOK: {
    backgroundColor: 'green'
  },
  answerKO: {
    backgroundColor: 'red'
  },
  resultAlert: {
    backgroundpaddingTop: 16,
    paddingBottom: 16,
    marginTop: theme.spacing.length * 3,
    width: '100%'
  }
}));

const QcmTest = ({
  exo
}) => {
  const classes = useStyles$4(); // eslint-disable-next-line @typescript-eslint/no-unused-vars

  useState([]);
  const [quiz, setQuiz] = useState([]); //const [currentQuestion, setCurrentQuestion] = useState<IQuestion>()

  const [selectedValue, setSelectedValue] = useState('');
  const [current, setCurrent] = useState(0);
  const [revealed, setRevealed] = useState(false);
  const [loadJsonError, setLoadJsonError] = useState(false);
  const [loading, setLoading] = useState(true);
  const [userResult, setUserResult] = useState([]); // const [projectId] = useLocalStorage<string>(QCM_CURRENT_PROJECT_ID, '');

  const projectId = window.localStorage.getItem(QCM_CURRENT_PROJECT_ID);
  const [qcmAllResults, setQcmAllResults] = useLocalStorage(`${QCM_RESULT}-${projectId}`, [{
    exerciseId: exo.id,
    result: []
  }]); //console.log('exo.id', exo.id)
  //console.log('useLocalStorage', qcmAllResults)
  //setName({})
  //used to load JSON from in html container

  useEffect(() => {
    //console.log('useEffect exo1', qcmList)
    const timer = setTimeout(() => {
      const el1 = document.querySelector('.qcm-container');
      setUserResult([]); //@todo: catch err

      try {
        const data = JSON.parse(`${el1 == null ? void 0 : el1.innerHTML}`);
        const qcm = data.find(res => res.exerciseId === exo.id);
        setCurrent(0);

        if (qcm != null && qcm.quiz) {
          setQuiz(qcm.quiz); //setCurrentQuestion(qcm.quiz[0])
        } else {
          setQuiz([]);
        }

        setLoading(false);
      } catch (err) {
        setLoadJsonError(true);
        setLoading(false);
      }
    }, 400);
    return () => clearTimeout(timer);
  }, []);

  const checkUserResult = () => {
    const foundErrResult = userResult.filter(el => el == false); //console.log(foundErrResult)

    return foundErrResult.length == 0;
  };

  const validateQCM = () => {
    if (checkUserResult()) {
      //window.localStorage.setItem(`exo-${exo?.id}`,'true')
      let qcmResultForExercice = qcmAllResults.find(res => res.exerciseId === exo.id); //console.log("qcmResultForExercice",qcmResultForExercice);

      if (qcmResultForExercice) {
        qcmResultForExercice.result = userResult;
        const updateList = qcmAllResults.map(res => {
          return res.exerciseId === exo.id ? qcmResultForExercice : res;
        });
        setQcmAllResults([...updateList]);
      } else {
        qcmResultForExercice = {
          exerciseId: exo.id,
          result: userResult
        }; //hook to store in JSON

        setQcmAllResults([...qcmAllResults, qcmResultForExercice]);
      }
    }
  };

  const nbError = userResult.filter(el => el == false).length;
  const resultContainError = nbError > 0;

  const handleChange = event => {
    setSelectedValue(event.target.value);
  };

  const moveNext = () => {
    setSelectedValue('');
    setRevealed(false);
    setCurrent(current + 1);
  };

  const movePrevious = () => {
    userResult.splice(current, 1);
    setSelectedValue('');
    setUserResult(userResult);
    setRevealed(false);
    setCurrent(current - 1);
  }; //render correct false anwser class


  const renderClassQuiz = index => {
    const isChecked = selectedValue === index.toString();
    let radioClass = '';

    if (revealed) {
      if (isChecked) {
        radioClass = quiz[current].answer === `${index}` ? classes.answerOK : classes.answerKO;
      } else {
        radioClass = quiz[current].answer === `${index}` ? classes.answerOK : '';
      }
    }

    return radioClass;
  }; //const currentExercice: number = 0 //exemple : 05 - Formulaire en React
  //QCM questions
  //const question: IQuestion = qcmList[currentExercice]?.quiz[current]


  const question = quiz[current];
  const curQuestion = current + 1;
  const size = quiz.length;
  const moveRight = current + 1 < quiz.length;
  const moveLeft = current == 0;
  const qcmFinish = quiz.length == userResult.length;

  const handleReveal = () => {
    if (selectedValue === question.answer) {
      userResult[current] = true;
    } else {
      userResult[current] = false;
    }

    setUserResult(userResult);
    setRevealed(true);
  }; //console.log('userResult', userResult)


  if (loading) {
    return /*#__PURE__*/React.createElement("div", {
      style: {
        textAlign: 'center'
      }
    }, "chargement ...");
  }

  if (loadJsonError) {
    return /*#__PURE__*/React.createElement("div", {
      style: {
        textAlign: 'center'
      }
    }, "Impossible de charger le JSON");
  }

  if (quiz.length < 1) {
    return /*#__PURE__*/React.createElement("div", {
      style: {
        textAlign: 'center'
      }
    }, "Pas de QCM pour cet exercice");
  } //const language = 'javascript'


  return /*#__PURE__*/React.createElement(React.Suspense, {
    fallback: /*#__PURE__*/React.createElement("div", null, "Loading...")
  }, /*#__PURE__*/React.createElement(Fireworks, {
    autoFire: qcmFinish && !resultContainError
  }), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Paper, {
    className: classes.root,
    elevation: 0
  }, /*#__PURE__*/React.createElement(Typography, {
    component: "p",
    style: {
      marginBottom: '30px'
    }
  }, /*#__PURE__*/React.createElement(Fab, {
    color: "primary",
    "aria-label": "add",
    className: classes.button
  }, /*#__PURE__*/React.createElement(FormatListBulletedIcon, null)), /*#__PURE__*/React.createElement("span", {
    className: classes.questionMeta
  }, ' ', "Question # ", curQuestion, " / ", size)), /*#__PURE__*/React.createElement(Typography, {
    component: "h5"
  }, "Module : ", exo.description), /*#__PURE__*/React.createElement("hr", {
    style: {
      marginBottom: '20px',
      marginTop: '5px'
    }
  }), /*#__PURE__*/React.createElement(Typography, {
    component: "h1",
    style: {
      fontSize: '1.2rem'
    }
  }, /*#__PURE__*/React.createElement("div", {
    dangerouslySetInnerHTML: {
      __html: question.question
    }
  })), question.options.map((opt, index) => /*#__PURE__*/React.createElement("div", {
    key: index,
    style: {
      marginTop: '5px'
    },
    className: renderClassQuiz(index)
  }, /*#__PURE__*/React.createElement(Radio, {
    checked: selectedValue === index.toString(),
    onChange: handleChange,
    value: index.toString(),
    name: "radio-button-demo",
    "aria-label": "A"
  }), /*#__PURE__*/React.createElement("span", {
    dangerouslySetInnerHTML: {
      __html: opt
    }
  }))), /*#__PURE__*/React.createElement("div", {
    className: classes.footer
  }, qcmFinish ? /*#__PURE__*/React.createElement(Button, {
    variant: "contained",
    onClick: validateQCM,
    color: "secondary",
    disabled: resultContainError || !revealed,
    style: {
      marginRight: 'auto',
      marginTop: '10px'
    }
  }, "Valider le QCM") : /*#__PURE__*/React.createElement(Button, {
    variant: "contained",
    onClick: handleReveal,
    color: "primary",
    disabled: selectedValue === '',
    style: {
      marginRight: 'auto',
      marginTop: '10px'
    }
  }, "Valider"), /*#__PURE__*/React.createElement(Button, {
    variant: "outlined",
    onClick: movePrevious,
    disabled: moveLeft,
    color: "primary",
    style: {
      marginRight: '20px',
      marginTop: '10px'
    }
  }, "Pr\xE9c\xE9dent"), /*#__PURE__*/React.createElement(Button, {
    variant: "outlined",
    onClick: moveNext,
    color: "primary",
    disabled: !moveRight || !revealed,
    style: {
      marginTop: '10px'
    }
  }, "Suivant")), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement("br", null), qcmFinish && resultContainError ? /*#__PURE__*/React.createElement(Paper, {
    className: classes.resultAlert,
    elevation: 0
  }, /*#__PURE__*/React.createElement(Alert, {
    variant: "outlined",
    severity: "error"
  }, /*#__PURE__*/React.createElement(AlertTitle, null, "Tu n'as pas encore r\xE9ussi le QCM"), "Pas de panique ! Tu n'as que ", nbError, " erreur(s) \xE0 corriger")) : null, qcmFinish && !resultContainError ? /*#__PURE__*/React.createElement(Paper, {
    className: classes.resultAlert,
    elevation: 0
  }, /*#__PURE__*/React.createElement(Alert, {
    variant: "outlined",
    severity: "success"
  }, /*#__PURE__*/React.createElement(AlertTitle, null, "F\xE9licitation !"), "Tu peux maintenant valider cet exercice, tu es pret pour la suite \uD83C\uDF89")) : null)));
};
/*
eslint
  @typescript-eslint/no-explicit-any: "off",
*/

/* eslint-disable @typescript-eslint/no-explicit-any */
const QCMFilePath = 'src/final/qcm/qcm.tsx';

const QcmDataLoader = ({
  exerciseInfo,
  lazyComponents
}) => {
  //Dont want use Server to expose Json, so i use Lazy React composent
  //to generate Json then it will be parsed for Qcm
  //console.log("exerciseInfo",exerciseInfo)
  //get QCM Lazy components from the sub module course
  const comp = lazyComponents[QCMFilePath];
  let qcmJsonElement;

  if (comp) {
    qcmJsonElement = /*#__PURE__*/React.createElement(comp);
  }

  return /*#__PURE__*/React.createElement(React.Suspense, {
    fallback: /*#__PURE__*/React.createElement("div", null, "Loading...")
  }, /*#__PURE__*/React.createElement(QcmTest, {
    exo: exerciseInfo
  }), /*#__PURE__*/React.createElement("div", {
    className: "qcm-container",
    style: {
      display: 'none'
    }
  }, qcmJsonElement));
};

//import "./styles.css";

function Code(props) {
  useEffect(() => {
    Prism.highlightAll();
  }, []);
  return /*#__PURE__*/React.createElement("div", {
    className: "Code"
  }, /*#__PURE__*/React.createElement("pre", null, /*#__PURE__*/React.createElement("code", {
    style: {
      whiteSpace: 'normal'
    },
    className: `language-${props.language}`
  }, props.children)));
}

/* eslint-disable @typescript-eslint/ban-types */
const useStyles$3 = makeStyles(theme => createStyles({
  root: {//width: '100%',
  },
  heading: {
    fontSize: theme.typography.pxToRem(15),
    flexBasis: '33.33%',
    flexShrink: 0
  },
  secondaryHeading: {
    fontSize: theme.typography.pxToRem(15),
    color: theme.palette.text.secondary
  }
}));
function AccordionEmojiHelp() {
  const classes = useStyles$3();
  const [expanded, setExpanded] = React.useState(false);

  const handleChange = panel => (event, isExpanded) => {
    setExpanded(isExpanded ? panel : false);
  };

  const mowgliCode = `<!-- 🐶 Ensuite créé une balise <script> pour le JavaScript -->`;
  const codeGetElmById = `🤖 const element = document.getElementById(id);`;
  const codeJulia = `<!-- 🚀 essaye maintenant avec le méthode X -->`;
  const codeMateau = `<!-- ⛏️ remove this line
<script src="https://unpkg.com/react@16.12.0/umd/react.development.js"></script>
<script src="https://unpkg.com/react-dom@16.12.0/umd/react-dom.development.js"></script>
⛏️ remove this line -->`;
  return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Alert, {
    variant: "outlined",
    severity: "info"
  }, /*#__PURE__*/React.createElement(AlertTitle, null, "Information"), "Dans le projet tu retrouveras differents Emojis/personnages", ' ', /*#__PURE__*/React.createElement("strong", null, "qui t'aideront \xE0 progresser"), /*#__PURE__*/React.createElement("br", null), "Le r\xF4le de chacun est detaill\xE9 ci-dessous"), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement(Accordion, {
    expanded: expanded === 'panel1',
    onChange: handleChange('panel1')
  }, /*#__PURE__*/React.createElement(AccordionSummary, {
    expandIcon: /*#__PURE__*/React.createElement(ExpandMoreIcon, null),
    "aria-controls": "panel1bh-content",
    id: "panel1bh-header"
  }, /*#__PURE__*/React.createElement(Typography, {
    className: classes.heading
  }, /*#__PURE__*/React.createElement("span", null, "\uD83D\uDC36"), " Mowgli le Chien"), /*#__PURE__*/React.createElement(Typography, {
    className: classes.secondaryHeading
  }, "Te donne des pistes pour avancer")), /*#__PURE__*/React.createElement(AccordionDetails, null, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Typography, null, "Mowgli te guidera dans chaque exercice. Il te donnera les \xE9tapes clefs pour passer les \xE9tapes."), /*#__PURE__*/React.createElement(Code, {
    language: "html"
  }, mowgliCode)))), /*#__PURE__*/React.createElement(Accordion, {
    expanded: expanded === 'panel2',
    onChange: handleChange('panel2')
  }, /*#__PURE__*/React.createElement(AccordionSummary, {
    expandIcon: /*#__PURE__*/React.createElement(ExpandMoreIcon, null),
    "aria-controls": "panel2bh-content",
    id: "panel2bh-header"
  }, /*#__PURE__*/React.createElement(Typography, {
    className: classes.heading
  }, /*#__PURE__*/React.createElement("span", null, "\uD83E\uDD16"), " Ash le Robot"), /*#__PURE__*/React.createElement(Typography, {
    className: classes.secondaryHeading
  }, "Le fournisseur de bout de code")), /*#__PURE__*/React.createElement(AccordionDetails, null, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Typography, null, "Ash le Robot te donnera des conseils sp\xE9cifiques (et parfois du code en cours de route)."), /*#__PURE__*/React.createElement(Code, {
    language: "javascript"
  }, codeGetElmById)))), /*#__PURE__*/React.createElement(Accordion, {
    expanded: expanded === 'panel3',
    onChange: handleChange('panel3')
  }, /*#__PURE__*/React.createElement(AccordionSummary, {
    expandIcon: /*#__PURE__*/React.createElement(ExpandMoreIcon, null),
    "aria-controls": "panel3bh-content",
    id: "panel3bh-header"
  }, /*#__PURE__*/React.createElement(Typography, {
    className: classes.heading
  }, /*#__PURE__*/React.createElement("span", null, "\uD83D\uDE80"), " Julia La roquette"), /*#__PURE__*/React.createElement(Typography, {
    className: classes.secondaryHeading
  }, "Va au del\xE0 des exercices avec Julia")), /*#__PURE__*/React.createElement(AccordionDetails, null, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Typography, null, "Julia te propulsera encore plus loin en te donnant des d\xE9fis suppl\xE9mentaires que tu peux relever si tu termines les exercices t\xF4t."), /*#__PURE__*/React.createElement(Code, {
    language: "html"
  }, codeJulia)))), /*#__PURE__*/React.createElement(Accordion, {
    expanded: expanded === 'panel4',
    onChange: handleChange('panel4')
  }, /*#__PURE__*/React.createElement(AccordionSummary, {
    expandIcon: /*#__PURE__*/React.createElement(ExpandMoreIcon, null),
    "aria-controls": "panel4bh-content",
    id: "panel3bh-header"
  }, /*#__PURE__*/React.createElement(Typography, {
    className: classes.heading
  }, /*#__PURE__*/React.createElement("span", null, "\uD83D\uDC1C"), " Dany la Fourmis"), /*#__PURE__*/React.createElement(Typography, {
    className: classes.secondaryHeading
  }, "Du Feedback avec Dany")), /*#__PURE__*/React.createElement(AccordionDetails, null, /*#__PURE__*/React.createElement(Typography, null, "Te donnera des informations utiles nous donner du feedback sur les courses."))), /*#__PURE__*/React.createElement(Accordion, {
    expanded: expanded === 'panel5',
    onChange: handleChange('panel5')
  }, /*#__PURE__*/React.createElement(AccordionSummary, {
    expandIcon: /*#__PURE__*/React.createElement(ExpandMoreIcon, null),
    "aria-controls": "panel5bh-content",
    id: "panel5bh-header"
  }, /*#__PURE__*/React.createElement(Typography, {
    className: classes.heading
  }, /*#__PURE__*/React.createElement("span", null, "\uD83D\uDCDD"), " Dominic le Document"), /*#__PURE__*/React.createElement(Typography, {
    className: classes.secondaryHeading
  }, "Retrouve la documentation utile avec Dominic")), /*#__PURE__*/React.createElement(AccordionDetails, null, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Typography, null, "Dominic le Document te donnera des liens vers de la documentation utile"), /*#__PURE__*/React.createElement(Code, {
    language: "markdow"
  }, "\"\uD83D\uDCDD https://reactjs.org/docs/hooks-state.html\"")))), /*#__PURE__*/React.createElement(Accordion, {
    expanded: expanded === 'panel6',
    onChange: handleChange('panel6')
  }, /*#__PURE__*/React.createElement(AccordionSummary, {
    expandIcon: /*#__PURE__*/React.createElement(ExpandMoreIcon, null),
    "aria-controls": "panel6bh-content",
    id: "panel6bh-header"
  }, /*#__PURE__*/React.createElement(Typography, {
    className: classes.heading
  }, "\u26CF\uFE0F Hulk le Marteau"), /*#__PURE__*/React.createElement(Typography, {
    className: classes.secondaryHeading
  }, "Le nettoyeur de code")), /*#__PURE__*/React.createElement(AccordionDetails, null, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Typography, null, "Tu le croisera o\xF9 tu as besoin de faire detruire des trucs (supprimer le code)"), /*#__PURE__*/React.createElement(Code, {
    language: "html"
  }, codeMateau)))), /*#__PURE__*/React.createElement(Accordion, {
    expanded: expanded === 'panel7',
    onChange: handleChange('panel7')
  }, /*#__PURE__*/React.createElement(AccordionSummary, {
    expandIcon: /*#__PURE__*/React.createElement(ExpandMoreIcon, null),
    "aria-controls": "panel7bh-content",
    id: "panel7bh-header"
  }, /*#__PURE__*/React.createElement(Typography, {
    className: classes.heading
  }, /*#__PURE__*/React.createElement("span", null, "\uD83D\uDEA8"), " Robert l'Alerte"), /*#__PURE__*/React.createElement(Typography, {
    className: classes.secondaryHeading
  }, "Quand un probl\xE8me survient")), /*#__PURE__*/React.createElement(AccordionDetails, null, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Typography, null, "Robert appara\xEEtra occasionnellement dans les \xE9checs des tests avec des explications potentielles pour lesquelles les tests"), /*#__PURE__*/React.createElement(Code, {
    language: "html"
  }, "\uD83D\uDEA8 Erreur de validation du syst\xE8me")))), /*#__PURE__*/React.createElement(Accordion, {
    expanded: expanded === 'panel8',
    onChange: handleChange('panel8')
  }, /*#__PURE__*/React.createElement(AccordionSummary, {
    expandIcon: /*#__PURE__*/React.createElement(ExpandMoreIcon, null),
    "aria-controls": "panel8bh-content",
    id: "panel8  bh-header"
  }, /*#__PURE__*/React.createElement(Typography, {
    className: classes.heading
  }, /*#__PURE__*/React.createElement("span", null, "\uD83D\uDC68\u200D\u2708\uFE0F"), " Hugo le chef de projet"), /*#__PURE__*/React.createElement(Typography, {
    className: classes.secondaryHeading
  }, "Le Chef de projet")), /*#__PURE__*/React.createElement(AccordionDetails, null, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Typography, null, "va t'aider sur les sp\xE9cifications du projet"), /*#__PURE__*/React.createElement(Code, {
    language: "md"
  }, "\uD83D\uDC68\u200D\u2708\uFE0F Nous souhaitons impl\xE9menter la fonctionnalit\xE9 X et Y")))));
}

/** @jsx jsx */
function Logo(props) {
  var _props$size, _props$size2, _props$color, _props$color2, _props$strokeWidth, _props$color3;

  const themeMui = useTheme();
  return jsx("svg", {
    version: "1.1",
    viewBox: "0 0 426 426",
    xmlns: "http://www.w3.org/2000/svg",
    width: (_props$size = props.size) != null ? _props$size : '34',
    height: (_props$size2 = props.size) != null ? _props$size2 : '34'
  }, jsx("g", {
    fill: (_props$color = props.color) != null ? _props$color : themeMui.palette.primary.main,
    stroke: (_props$color2 = props.color) != null ? _props$color2 : themeMui.palette.primary.main,
    strokeWidth: (_props$strokeWidth = props.strokeWidth) != null ? _props$strokeWidth : 0,
    transform: "translate(2.5 .5)"
  }), jsx("path", {
    style: {
      fill: (_props$color3 = props.color) != null ? _props$color3 : themeMui.palette.primary.main
    },
    d: "M412.5,214.3c-9.2,58.5-27.1,75.6-58.8,114.9c-31.7,33.3-77.3,88.9-141.9,85.8c-58.5-9.2-75.6-27.1-114.9-58.8  C63.6,324.5,8,278.9,11.1,214.3c9.2-58.5,27.1-75.6,58.8-114.9c31.7-33.3,77.3-88.9,141.9-85.8c58.5,9.2,75.6,27.1,114.9,58.8  C360,104.1,415.6,149.7,412.5,214.3z"
  }), jsx("g", null, jsx("circle", {
    style: {
      fill: themeMui.palette.primary.contrastText
    },
    cx: "211.8",
    cy: "214",
    r: "25.1"
  }), jsx("path", {
    style: {
      fill: themeMui.palette.primary.contrastText
    },
    d: "M337.7,189c-8.7-7.2-20.9-13.7-35.5-18.7c-2.9-1-5.9-2-9-2.8c0.5-2.1,1-4.2,1.4-6.2c7-33.8,2-60.1-12.9-68.7   c-7.3-4.2-17.3-4.2-28.8,0c-10.6,3.9-22.3,11.3-33.9,21.4c-2.3,2-4.7,4.2-7,6.4c-1.6-1.5-3.1-2.9-4.7-4.3   c-25.8-22.9-51.1-31.8-66-23.2c-7.3,4.2-12.3,12.9-14.4,25c-1.9,11.1-1.3,25,1.6,40.1c0.6,3,1.3,6.2,2.1,9.3   c-3.6,1-7.1,2.1-10.4,3.3c-30.5,10.6-48.7,26.8-48.7,43.4c0,8.6,5.1,17.6,14.7,25.8c9,7.7,21.7,14.5,36.7,19.6   c2.5,0.8,5,1.6,7.6,2.4c-0.8,3.4-1.6,6.7-2.2,10c-6,31.7-1,55.6,13.3,63.9c3.8,2.2,8.3,3.3,13.4,3.3c4.9,0,10.4-1,16.2-3.1   c11.2-3.9,23.4-11.5,35.3-21.9c1.9-1.7,3.9-3.5,5.8-5.4c2.5,2.4,5.1,4.7,7.6,6.9c18,15.5,35.2,23.7,48.8,23.7   c4.9,0,9.4-1.1,13.1-3.3c7.5-4.3,12.7-13.2,15-25.6c2.1-11.7,1.6-26.1-1.4-41.6c-0.5-2.5-1-5-1.7-7.5c1.8-0.5,3.5-1.1,5.2-1.6   c32.8-10.8,53.1-28.3,53.1-45.5C352.1,205.6,347.1,196.9,337.7,189z M257,103.9c8-2.9,14.6-3.2,18.7-0.9c8,4.6,13.7,24.1,7.1,55.9   c-0.4,1.8-0.8,3.7-1.3,5.5c-11.7-2.7-24.3-4.7-37.6-5.9c-7.7-11-15.7-20.9-23.7-29.5c2.1-2.1,4.3-4,6.4-5.9   C237.3,114,247.8,107.3,257,103.9z M251,236.9c-4.4,7.6-8.9,14.9-13.4,21.7c-8.3,0.6-16.9,0.9-25.7,0.9c-8.8,0-17.3-0.3-25.4-0.8   c-4.8-7-9.4-14.3-13.7-21.7c-4.3-7.5-8.3-15.1-12-22.6c3.6-7.6,7.6-15.2,11.9-22.6l0,0c4.3-7.5,8.9-14.8,13.6-21.7   c8.4-0.6,16.9-1,25.5-1c8.7,0,17.2,0.3,25.6,1c4.6,6.9,9.2,14.1,13.5,21.6c4.4,7.7,8.5,15.2,12.1,22.5   C259.4,221.7,255.4,229.3,251,236.9z M269.5,228c3.8,8.6,6.9,16.8,9.4,24.7c-8.1,1.9-16.9,3.4-26.2,4.5c2.9-4.6,5.8-9.4,8.6-14.3   C264.3,237.9,267,232.9,269.5,228z M212.3,291.4c-5.7-6.1-11.4-12.9-16.9-20.2c5.3,0.2,10.8,0.3,16.4,0.3c5.7,0,11.4-0.1,17-0.4   C223.3,278.5,217.8,285.3,212.3,291.4z M171.2,257.3c-9.2-1-17.9-2.4-25.8-4.2c2.5-8,5.5-16.3,9.1-24.7c2.5,4.8,5.2,9.7,8,14.5   C165.2,247.9,168.1,252.7,171.2,257.3z M162.4,185.7c-2.8,4.8-5.4,9.7-8,14.5c-3.5-8.3-6.5-16.4-8.9-24.3c8-1.8,16.6-3.3,25.5-4.4   C168,176.2,165.1,180.9,162.4,185.7z M212,137.6c5.5,6,11,12.6,16.5,19.9c-5.5-0.3-11.1-0.4-16.7-0.4c-5.5,0-11,0.1-16.4,0.4   C200.8,150.3,206.4,143.6,212,137.6z M261.3,185.6c-2.8-4.8-5.6-9.5-8.5-14c8.9,1.1,17.5,2.6,25.6,4.5c-2.4,7.8-5.4,15.9-9,24.2   C266.9,195.4,264.2,190.5,261.3,185.6z M140.3,155.7c-2.7-13.6-3.2-26-1.5-35.7c1.4-8.4,4.5-14.3,8.6-16.7c8-4.6,27.7,0.2,52,21.8   c1.4,1.2,2.8,2.5,4.2,3.9c-8.2,8.8-16.2,18.7-23.8,29.5c-13.2,1.2-25.8,3.2-37.5,5.8C141.5,161.4,140.9,158.6,140.3,155.7z    M126.7,248.1c-29.7-10.1-43.2-24.8-43.2-34.1c0-8.9,12.6-22.3,40.7-32.1c3.1-1.1,6.3-2.1,9.6-3c3.5,11.5,8.1,23.4,13.7,35.5   c-5.6,12.2-10.3,24.3-13.8,35.9C131.3,249.6,129,248.8,126.7,248.1z M155,327c-3,0-5.5-0.6-7.4-1.7c-7.7-4.4-13-22-7.5-51.2   c0.6-3,1.3-6.1,2-9.3c11.4,2.5,24.1,4.4,37.8,5.5c7.8,10.9,15.9,21,24.1,29.8c-1.8,1.7-3.6,3.4-5.3,4.9   C180.5,320.7,164.9,327,155,327z M283.8,271c6.1,30.8,0.2,49.8-7.8,54.4c-7.7,4.5-25.6,0.3-48.1-19.1c-2.3-2-4.7-4.2-7.1-6.4   c7.9-8.6,15.8-18.6,23.5-29.9c13.6-1.2,26.4-3.2,38-5.9C282.8,266.5,283.3,268.8,283.8,271z M295.3,248.1c-1.5,0.5-3.1,1-4.7,1.5   c-3.5-11.2-8.3-23.1-14.2-35.5c5.6-12.1,10.2-23.9,13.7-35.1c2.9,0.8,5.7,1.7,8.4,2.6c13.1,4.5,24.1,10.3,31.7,16.6   c6.5,5.4,10.1,11,10.1,15.8C340.2,223.3,326.1,237.9,295.3,248.1z"
  })));
}

function LinearProgressWithLabel(props) {
  // let a:Toto
  //console.log(QCM_RESULT);
  return /*#__PURE__*/React.createElement(Box, {
    display: "flex",
    alignItems: "center"
  }, /*#__PURE__*/React.createElement(Box, {
    width: "100%",
    mr: 1
  }, /*#__PURE__*/React.createElement(LinearProgress, _extends({
    variant: "determinate"
  }, props))), /*#__PURE__*/React.createElement(Box, {
    minWidth: 35
  }, /*#__PURE__*/React.createElement(Typography, {
    variant: "body2",
    color: "textSecondary"
  }, `${Math.round(props.value)}%`)));
} // const useStyles = makeStyles({
//   root: {
//     width: '40%',
//     paddingLeft:'20px'
//   },
// });


const useStyles$2 = makeStyles(theme => createStyles({
  root: {
    width: '40%',
    paddingLeft: '20px',
    [theme.breakpoints.down('md')]: {
      display: 'none'
    }
  }
}));
//const QCM_RESULT = 'QcmResult';
function ProgressBar(props) {
  const classes = useStyles$2();
  const [progress, setProgress] = React.useState(10); //const [projectId] = useLocalStorage<string>(QCM_CURRENT_PROJECT_ID, '');

  const projectId = window.localStorage.getItem(QCM_CURRENT_PROJECT_ID);
  const [qcmAllResults] = useLocalStorage(`${QCM_RESULT$1}-${projectId}`, []);
  React.useEffect(() => {
    /*const timer = setInterval(() => {
      setProgress((prevProgress) => (prevProgress >= 100 ? 10 : prevProgress + 10));
    }, 800);
    return () => {
      clearInterval(timer);
    };*/
    //console.log('ProgressBar',qcmAllResults.length/props.exoLength)
    //console.log('ProgressBar',props.exoLength)
    setProgress(qcmAllResults.length / (props.exoLength - 1) * 100);
  }, []);
  return /*#__PURE__*/React.createElement("div", {
    className: classes.root
  }, /*#__PURE__*/React.createElement(Fireworks, {
    autoFire: true
  }), /*#__PURE__*/React.createElement(LinearProgressWithLabel, {
    value: progress
  }));
}

/** @jsx jsx */
//  const QCM_FINISH_ICON_COLOR = 'green';
//  const QCM_NOT_FINISH_ICON_COLOR = 'grey';

const useStyles$1 = makeStyles(theme => createStyles({
  grow: {
    flexGrow: 1,
    overflow: 'hidden'
  },
  menuButton: {
    marginRight: theme.spacing(2)
  },
  title: {
    display: 'none',
    [theme.breakpoints.up('sm')]: {
      display: 'block'
    }
  },
  search: {
    position: 'relative',
    borderRadius: theme.shape.borderRadius,
    backgroundColor: alpha(theme.palette.common.white, 0.15),
    '&:hover': {
      backgroundColor: alpha(theme.palette.common.white, 0.25)
    },
    marginRight: theme.spacing(2),
    marginLeft: 0,
    width: '100%',
    [theme.breakpoints.up('sm')]: {
      marginLeft: theme.spacing(3),
      width: 'auto'
    }
  },
  searchIcon: {
    padding: theme.spacing(0, 2),
    height: '100%',
    position: 'absolute',
    pointerEvents: 'none',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center'
  },
  inputRoot: {
    color: 'inherit'
  },
  inputInput: {
    padding: theme.spacing(1, 1, 1, 0),
    // vertical padding + font size from searchIcon
    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,
    transition: theme.transitions.create('width'),
    width: '100%',
    [theme.breakpoints.up('md')]: {
      width: '20ch'
    }
  },
  sectionDesktop: {
    display: 'none',
    [theme.breakpoints.up('md')]: {
      display: 'flex'
    }
  },
  sectionMobile: {
    display: 'flex',
    [theme.breakpoints.up('md')]: {
      display: 'none'
    }
  }
}));
const visuallyHiddenStyles = {
  border: '0',
  clip: 'rect(0 0 0 0)',
  height: '1px',
  margin: '-1px',
  overflow: 'hidden',
  padding: '0',
  position: 'absolute',
  width: '1px'
};
const mq = facepaint(['@media(min-width: 576px)', '@media(min-width: 768px)', '@media(min-width: 992px)', '@media(min-width: 1200px)']);
function AppBarMenu({
  exerciseNumber,
  mode,
  setMode,
  exerciseInfo,
  classes,
  history,
  theme,
  projectTitle
}) {
  const classesInt = useStyles$1(); //   const useTheme = () => useEmotionTheme<Theme>()
  //   //const theme = useTheme()

  const themeMui = useTheme();
  const [anchorEl, setAnchorEl] = React.useState(null);
  const [mobileMoreAnchorEl, setMobileMoreAnchorEl] = React.useState(null);
  const [swithDarkMode, setSwithDarkMode] = React.useState(mode === 'dark'); //const [projectId] = useLocalStorage<string>(QCM_CURRENT_PROJECT_ID, '');

  const projectId = window.localStorage.getItem(QCM_CURRENT_PROJECT_ID);
  const [qcmAllResults] = useLocalStorage(`${QCM_RESULT$1}-${projectId}`, []);

  const handleChange = event => {
    setSwithDarkMode(event.target.checked);
    setMode(mode === 'light' ? 'dark' : 'light'); //setState({ ...state, [event.target.name]: event.target.checked });
  };

  const isMenuOpen = Boolean(anchorEl);
  const isMobileMenuOpen = Boolean(mobileMoreAnchorEl);
  const info = exerciseNumber ? exerciseInfo[exerciseNumber] : null;

  const handleMobileMenuClose = () => {
    setMobileMoreAnchorEl(null);
  };

  const handleMenuClose = () => {
    setAnchorEl(null);
    handleMobileMenuClose();
  };

  const handleMobileMenuOpen = event => {
    setMobileMoreAnchorEl(event.currentTarget);
  };

  const handleNavigate = (event, e) => {
    event.preventDefault();
    history.push(`/${e.number}`);
    setMobileMoreAnchorEl(null);
  };

  const menuId = 'primary-search-account-menu';
  const renderMenu = jsx(Menu, {
    anchorEl: anchorEl,
    anchorOrigin: {
      vertical: 'top',
      horizontal: 'right'
    },
    id: menuId,
    keepMounted: true,
    transformOrigin: {
      vertical: 'top',
      horizontal: 'right'
    },
    open: isMenuOpen,
    onClose: handleMenuClose
  }, jsx(MenuItem, {
    onClick: handleMenuClose
  }, "Profile"), jsx(MenuItem, {
    onClick: handleMenuClose
  }, "My account"));
  const mobileMenuId = 'primary-search-account-menu-mobile';

  const isExerciceQCMValidate = exerciceID => {
    //console.log("qcmAllResults",qcmAllResults)
    return !!qcmAllResults.find(res => res.exerciseId == exerciceID);
  };

  const renderMobileMenu = () => {
    return jsx(Menu, {
      anchorEl: mobileMoreAnchorEl,
      anchorOrigin: {
        vertical: 'top',
        horizontal: 'right'
      },
      keepMounted: true,
      transformOrigin: {
        vertical: 'top',
        horizontal: 'right'
      },
      open: isMobileMenuOpen,
      onClose: handleMobileMenuClose
    }, exerciseInfo.map((e, index) => jsx(MenuItem, {
      key: index,
      selected: e.id === mobileMenuId,
      onClick: event => {
        handleNavigate(event, e);
      }
    }, isExerciceQCMValidate(e.id) ? jsx(CheckCircleIcon, {
      style: {
        color: QCM_FINISH_ICON_COLOR
      }
    }) : jsx(CheckCircleIcon, {
      style: {
        color: QCM_NOT_FINISH_ICON_COLOR
      }
    }), jsx("p", null, "\xA0 ", e.title))));
  }; // <Menu
  //   anchorEl={mobileMoreAnchorEl}
  //   anchorOrigin={{vertical: 'top', horizontal: 'right'}}
  //   id={mobileMenuId}
  //   keepMounted
  //   transformOrigin={{vertical: 'top', horizontal: 'right'}}
  //   open={isMobileMenuOpen}
  //   onClose={handleMobileMenuClose}
  // >
  //   <MenuItem>
  //     <IconButton aria-label="show 4 new mails" color="inherit">
  //       <Badge badgeContent={4} color="secondary">
  //         <MailIcon />
  //       </Badge>
  //     </IconButton>
  //     <p>Messages mob</p>
  //   </MenuItem>
  //   <MenuItem>
  //     <IconButton aria-label="show 11 new notifications" color="inherit">
  //       <Badge badgeContent={11} color="secondary">
  //         <NotificationsIcon />
  //       </Badge>
  //     </IconButton>
  //     <p>Notifications</p>
  //   </MenuItem>
  //   <MenuItem onClick={handleProfileMenuOpen}>
  //     <IconButton
  //       aria-label="account of current user"
  //       aria-controls="primary-search-account-menu"
  //       aria-haspopup="true"
  //       color="inherit"
  //     >
  //       <AccountCircle />
  //     </IconButton>
  //     <p>Profile</p>
  //   </MenuItem>
  // </Menu>


  const SwitchCompo = jsx("div", {
    css: {
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'flex-end'
    }
  }, jsx(Tooltip, {
    title: "Switch Dark Mode"
  }, jsx(SwitchMui, {
    checked: swithDarkMode,
    color: "primary",
    onChange: handleChange,
    name: "checkedA",
    inputProps: {
      'aria-label': 'primary checkbox'
    }
  })));
  return jsx("div", {
    style: {
      overflow: 'hidden'
    }
  }, jsx(AppBar, {
    position: "relative",
    color: "default"
  }, jsx(Toolbar, {
    variant: "dense",
    style: {
      overflow: 'hidden'
    }
  }, jsx("div", {
    css: mq({
      a: {
        textDecoration: 'none'
      },
      alignItems: 'center',
      background: theme.backgroundLight,
      boxShadow: '0 0.9px 1.5px -18px rgba(0, 0, 0, 0.024), 0 2.4px 4.1px -18px rgba(0, 0, 0, 0.035), 0 5.7px 9.9px -18px rgba(0, 0, 0, 0.046), 0 19px 33px -18px rgba(0, 0, 0, 0.07)',
      display: 'grid',
      gridTemplateColumns: exerciseNumber ? ['3fr .5fr', '1fr 2fr', '1fr 1fr'] : '1fr 1fr',
      height: 60,
      padding: ['0 0rem', '0 0.0rem'],
      width: '100%',
      'span[role="img"]': {
        fontSize: [24, 24, 'inherit']
      },
      '.exercise-title': {
        color: theme.text,
        display: ['none', 'inline-block', 'inline-block'],
        fontSize: 15,
        opacity: 0.9,
        ':hover': {
          opacity: 1
        }
      }
    })
  }, jsx("div", {
    css: {
      display: 'flex',
      alignItems: 'center'
    }
  }, jsx(Link, {
    to: "/",
    css: {
      display: 'flex',
      alignItems: 'center',
      color: 'inherit',
      textDecoration: 'none'
    }
  }, jsx(Logo, {
    css: {
      marginRight: '.5rem'
    },
    strokeWidth: 0.8
  }), jsx("div", {
    css: {
      display: 'flex',
      flexDirection: 'column',
      marginLeft: '.5rem'
    }
  }, jsx("h1", {
    css: {
      fontSize: 16,
      margin: 0
    }
  }, projectTitle), jsx("span", {
    css: {
      fontSize: 14,
      opacity: '.8'
    }
  }, "Mike Codeur"))), jsx(ProgressBar, {
    exoLength: exerciseInfo.length
  })), jsx("div", {
    className: classesInt.sectionDesktop
  }, jsx("div", {
    css: {
      alignItems: 'center',
      display: 'grid',
      gridTemplateColumns: exerciseNumber ? '3fr 2fr 3fr 3rem' : '1fr',
      paddingLeft: '1rem',
      width: '100%'
    }
  }, info ? jsx(React.Fragment, null, jsx("div", null, info.previous ? jsx(Link, {
    to: `/${info.previous.number}`,
    css: {
      display: 'flex',
      alignItems: 'center',
      textDecoration: 'none'
    }
  }, jsx(RiArrowLeftSLine, {
    size: 20
  }), jsx(Button, {
    variant: "outlined",
    className: classes.buttonNavTextWrap
  }, jsx("div", {
    className: classes.labelNavTextWrap
  }, info.previous.title))) : null), jsx("div", {
    css: {
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center'
    }
  }, exerciseInfo.map(e => jsx(React.Fragment, {
    key: e.id
  }, jsx("input", {
    id: `exercise-dot-${e.id}`,
    type: "radio",
    name: "exercise-dots",
    checked: e.id === info.id,
    onChange: () => history.push(`/${e.number}`),
    css: visuallyHiddenStyles
  }), jsx("label", {
    htmlFor: `exercise-dot-${e.id}`,
    title: e.title
  }, jsx("span", {
    css: visuallyHiddenStyles
  }, e.title), jsx("span", {
    css: {
      cursor: 'pointer',
      display: 'block',
      background: e.id === info.id ? themeMui.palette.secondary.main : themeMui.palette.primary.main,
      borderRadius: '50%',
      height: 12,
      width: 12,
      margin: '0 6px'
    }
  }))))), jsx("div", {
    css: {
      textAlign: 'right'
    }
  }, info.next ? jsx(Link, {
    to: `/${info.next.number}`,
    css: {
      alignItems: 'center',
      display: 'flex',
      justifyContent: 'flex-end',
      textDecoration: 'none'
    }
  }, jsx(Button, {
    variant: "outlined",
    className: classes.buttonNavTextWrap
  }, jsx("div", {
    className: classes.labelNavTextWrap
  }, info.next.title)), ' ', jsx(RiArrowRightSLine, {
    size: 20
  })) : null)) : null, SwitchCompo)), jsx("div", {
    className: classesInt.sectionMobile,
    style: {
      marginLeft: 'auto'
    }
  }, SwitchCompo, jsx(IconButton, {
    "aria-label": "show more",
    "aria-controls": mobileMenuId,
    "aria-haspopup": "true",
    onClick: handleMobileMenuOpen,
    color: "inherit"
  }, jsx(MoreIcon, null)))))), renderMobileMenu(), renderMenu);
}

// const themeLight = {
//   background: '#F4F6F8',
//   backgroundLight: '#fff',
//   text: '#212b36',
//   textLightest: '#8E9EAC',
//   primary: '#1675ff',
//   sky: '#E9EDF1',
//   skyLight: '#F4F6F8',
//   skyDark: '#C4CDD5',
// }
// type Theme = typeof themeLight
// const themeDark: Theme = {
//   background: '#19212a',
//   backgroundLight: '#212b36',
//   text: '#fff',
//   textLightest: '#8E9EAC',
//   primary: '#3587ff',
//   sky: '#0D1217',
//   skyLight: '#11181E',
//   skyDark: '#8E9EAC',
// }
const themeLight = {
  background: '#F4F6F8',
  backgroundLight: '#fff',
  text: '#212b36',
  textLightest: '#8E9EAC',
  primary: '#1675ff',
  sky: '#E9EDF1',
  skyLight: '#F4F6F8',
  skyDark: '#C4CDD5'
};
const colorBgGradient = 'linear-gradient(to right, #011627 0%, #011f38 100%)';
const themeDark = {
  background: colorBgGradient,
  backgroundLight: '#011627',
  text: '#fff',
  textLightest: '#8E9EAC',
  primary: '#3587ff',
  sky: '#0D1217',
  skyLight: '#11181E',
  skyDark: '#8E9EAC'
};

const theme = mode => mode === 'dark' ? themeDark : themeLight;
const prismThemeLight = `
code[class*='language-'], pre[class*='language-'] {
  color: #403f53;
  font-family: Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace;
  text-align: left;
  white-space: pre;
  word-spacing: normal;
  word-break: normal;
  word-wrap: normal;
  line-height: 1.5;

  -moz-tab-size: 4;
  -o-tab-size: 4;
  tab-size: 4;

  -webkit-hyphens: none;
  -moz-hyphens: none;
  -ms-hyphens: none;
  hyphens: none;
}

pre[class*='language-']::-moz-selection,
pre[class*='language-'] ::-moz-selection,
code[class*='language-']::-moz-selection,
code[class*='language-'] ::-moz-selection {
text-shadow: none;
background: rgba(22, 117, 255, 1);
}

pre[class*='language-']::selection,
pre[class*='language-'] ::selection,
code[class*='language-']::selection,
code[class*='language-'] ::selection {
text-shadow: none;
background: rgba(22, 117, 255, 1);
}

@media print {
code[class*='language-'],
pre[class*='language-'] {
  text-shadow: none;
}
}

/* Code blocks */
pre {
padding: 1em;
margin: 0.5em 0;
overflow: auto;
}

:not(pre) > code,
pre {
color: #403f53;
background: #f0f0f0;
}

:not(pre) > code {
padding: 0.1em;
border-radius: 0.3em;
white-space: normal;
}

.token.comment,
.token.prolog,
.token.cdata {
color: rgb(152, 159, 177);
font-style: italic;
}

.token.punctuation {
color: rgb(153, 76, 195);
}

.namespace {
color: rgb(12, 150, 155);
}

.token.deleted {
color: rgba(64, 63, 83, 0.56);
font-style: italic;
}

.token.symbol,
.token.property {
color: rgb(153, 76, 195);
}

.token.tag,
.token.operator,
.token.keyword {
color: #994cc3;
}

.token.boolean {
color: rgb(188, 84, 84);
}

.token.number {
color: rgb(170, 9, 130);
}

.token.constant,
.token.function,
.token.builtin,
.token.char {
color: rgb(72, 118, 214);
}

.token.selector,
.token.doctype {
color: rgb(153, 76, 195);
font-style: italic;
}

.token.attr-name,
.token.inserted {
color: rgb(72, 117, 214);
font-style: italic;
}

.token.string,
.token.url,
.token.entity,
.language-css .token.string,
.style .token.string {
color: #c96765;
}

.token.class-name,
.token.atrule,
.token.attr-value {
color: #c96765;
}

.token.regex,
.token.important,
.token.variable {
color: rgb(64, 63, 83);
}

.token.important,
.token.bold {
font-weight: bold;
}

.token.italic {
font-style: italic;
}
`;

const prismThemeDark = `

code[class*="language-"],
pre[class*="language-"] {
	color: #c5c8c6;
	text-shadow: 0 1px rgba(0, 0, 0, 0.3);
	font-family: Inconsolata, Monaco, Consolas, 'Courier New', Courier, monospace;
	direction: ltr;
	text-align: left;
	white-space: pre;
	word-spacing: normal;
	word-break: normal;
	line-height: 1.5;

	-moz-tab-size: 4;
	-o-tab-size: 4;
	tab-size: 4;

	-webkit-hyphens: none;
	-moz-hyphens: none;
	-ms-hyphens: none;
	hyphens: none;
}

/* Code blocks */
pre[class*="language-"] {
	padding: 1em;
	margin: .5em 0;
	overflow: auto;
	border-radius: 0.3em;
}

:not(pre) > code[class*="language-"],
pre[class*="language-"] {
	background: #1d1f21;
}

/* Inline code */
:not(pre) > code[class*="language-"] {
	padding: .1em;
	border-radius: .3em;
}

.token.comment,
.token.prolog,
.token.doctype,
.token.cdata {
	color: #7C7C7C;
}

.token.punctuation {
	color: #c5c8c6;
}

.namespace {
	opacity: .7;
}

.token.property,
.token.keyword,
.token.tag {
	color: #96CBFE;
}

.token.class-name {
	color: #FFFFB6;
	text-decoration: underline;
}

.token.boolean,
.token.constant {
	color: #99CC99;
}

.token.symbol,
.token.deleted {
	color: #f92672;
}

.token.number {
	color: #FF73FD;
}

.token.selector,
.token.attr-name,
.token.string,
.token.char,
.token.builtin,
.token.inserted {
	color: #A8FF60;
}

.token.variable {
	color: #C6C5FE;
}

.token.operator {
	color: #EDEDED;
}

.token.entity {
	color: #FFFFB6;
	cursor: help;
}

.token.url {
	color: #96CBFE;
}

.language-css .token.string,
.style .token.string {
	color: #87C38A;
}

.token.atrule,
.token.attr-value {
	color: #F9EE98;
}

.token.function {
	color: #DAD085;
}

.token.regex {
	color: #E9C062;
}

.token.important {
	color: #fd971f;
}

.token.important,
.token.bold {
	font-weight: bold;
}

.token.italic {
	font-style: italic;
}
`;

/* eslint-disable @typescript-eslint/ban-types */
const useStyles = makeStyles(theme => ({
  root: {
    '& > *': {
      margin: theme.spacing(1)
    },
    flexGrow: 1
  },
  firstIcon: {
    paddingLeft: 70
  },
  labelContainer: {
    width: 'auto',
    padding: 0
  },
  iconLabelWrapper: {
    flexDirection: 'row'
  },
  iconLabelWrapper2: {
    flexDirection: 'row-reverse'
  },
  buttonNavTextWrap: {
    maxWidth: '250px',
    whiteSpace: 'nowrap',
    overflow: 'hidden',
    textOverflow: 'ellipsis'
  },
  labelNavTextWrap: {
    maxWidth: '100%',
    whiteSpace: 'nowrap',
    overflow: 'hidden',
    textOverflow: 'ellipsis'
  }
}));
const styleTag$1 = document.createElement('style');
styleTag$1.innerHTML = [":root{--reach-tabs:1}[data-reach-tabs][data-orientation=vertical]{display:flex}[data-reach-tab-list]{display:flex;background:rgba(0,0,0,.05)}[data-reach-tab-list][aria-orientation=vertical]{flex-direction:column}[data-reach-tab]{display:inline-block;padding:.25em .5em;margin:0;border:none;border-bottom:1px solid transparent;background:none;color:inherit;font:inherit;cursor:pointer;-webkit-appearance:none;-moz-appearance:none}[data-reach-tab]:active{background:rgba(0,0,0,.05)}[data-reach-tab]:disabled{opacity:.25;cursor:default}[data-reach-tab][data-selected]{border-bottom-color:initial}"].join('\n');
document.head.prepend(styleTag$1); //const extrIcons = [null, CgDice1, CgDice2, CgDice3, CgDice4, CgDice5, CgDice6]
//const getDiceIcon = (number: number) => extrIcons[number] ?? FaDiceD20

function getDistanceFromTopOfPage(element) {
  let distance = 0;

  while (element) {
    distance += element.offsetTop - element.scrollTop + element.clientTop;
    element = element.offsetParent;
  }

  return distance;
}

const totallyCenteredStyles = {
  minWidth: '100%',
  minHeight: '100%',
  display: 'grid'
}; // const visuallyHiddenStyles: InterpolationWithTheme<Theme> = {
//   border: '0',
//   clip: 'rect(0 0 0 0)',
//   height: '1px',
//   margin: '-1px',
//   overflow: 'hidden',
//   padding: '0',
//   position: 'absolute',
//   width: '1px',
// }

const exerciseTypes = ['final', 'exercise', 'instruction'];

const isExerciseType = type => // .includes *should* allow you to pass any type, but it does not :-(
exerciseTypes.includes(type);

function renderReactApp({
  history,
  projectTitle,
  filesInfo,
  lazyComponents,
  gitHubRepoUrl,
  render
}) {
  //
  const splitTitle = gitHubRepoUrl.split('/');
  const projectIdFromGithub = splitTitle[splitTitle.length - 1];
  window.localStorage.setItem(QCM_CURRENT_PROJECT_ID, projectIdFromGithub);

  const useTheme = () => useTheme$1();

  const exerciseInfo = [];

  for (const fileInfo of filesInfo) {
    const type = fileInfo.type;

    if (isExerciseType(type)) {
      var _exerciseInfo$fileInf;

      exerciseInfo[fileInfo.number] = (_exerciseInfo$fileInf = exerciseInfo[fileInfo.number]) != null ? _exerciseInfo$fileInf : {
        exercise: [],
        final: []
      };
      const info = exerciseInfo[fileInfo.number];

      if (type === 'instruction') {
        info.instruction = fileInfo;
        const {
          title,
          number,
          id,
          description
        } = fileInfo;
        Object.assign(info, {
          title,
          number,
          id,
          description
        });
      } else {
        info[type].push(fileInfo);
      }
    }
  }

  for (const info of exerciseInfo.filter(Boolean)) {
    info.next = exerciseInfo[info.number + 1];
    info.previous = exerciseInfo[info.number - 1];
  }

  const mq = facepaint(['@media(min-width: 576px)', '@media(min-width: 768px)', '@media(min-width: 992px)', '@media(min-width: 1200px)']);

  const tabStyles = ({
    theme
  }) => ({
    background: theme.backgroundLight,
    borderTop: `1px solid ${theme.sky}`,
    height: '100%',
    position: 'relative',
    h3: {
      fontSize: '0.5em'
    },
    zIndex: 10,
    '[data-reach-tab]': {
      padding: '0.5rem 1.25rem',
      ':hover': {
        color: theme.primary
      }
    },
    '[data-reach-tab][data-selected]': {
      background: theme.backgroundLight,
      border: 'none',
      svg: {
        fill: theme.primary,
        color: theme.primary
      },
      ':hover': {
        color: 'inherit'
      }
    }
  });

  function FileTabs({
    isOpen,
    files
  }) {
    const theme = useTheme();
    const classes = useStyles();
    const [tabIndex, setTabIndex] = React.useState(0);
    const renderedTabs = React.useRef();

    if (!renderedTabs.current) {
      renderedTabs.current = new Set([0]);
    }

    function handleTabChange(index) {
      var _renderedTabs$current;

      setTabIndex(index);
      (_renderedTabs$current = renderedTabs.current) == null ? void 0 : _renderedTabs$current.add(index);
    }

    const handleChange = (event, newValue) => {
      var _renderedTabs$current2;

      //console.log('handleChange', event)
      setTabIndex(newValue);
      (_renderedTabs$current2 = renderedTabs.current) == null ? void 0 : _renderedTabs$current2.add(newValue);
    };

    const filesToTabs = () => {
      const tabs = files.map(({
        id,
        filename,
        extraCreditNumber = -1,
        isExtraCredit,
        type
      }) => {
        //console.log('filesToTabs id', id)
        if (isExtraCredit) {
          return jsx(TabMui, {
            key: id,
            label: `Bonus ${extraCreditNumber}`,
            icon: jsx(MdDns, {
              size: "20",
              color: theme.textLightest,
              css: {
                marginRight: 5
              }
            }),
            classes: {
              wrapper: classes.iconLabelWrapper
            }
          });
        } else if (type === 'final') {
          return jsx(TabMui, {
            key: id,
            label: `Solution`,
            icon: jsx(MdCheckCircle, {
              size: "20",
              color: theme.textLightest,
              css: {
                marginRight: 5
              }
            }),
            classes: {
              wrapper: classes.iconLabelWrapper
            }
          });
        } else if (type === 'exercise') {
          return jsx(TabMui, {
            key: id,
            label: `Exercice`,
            icon: jsx(MdLaptop, {
              size: "20",
              color: theme.textLightest,
              css: {
                marginRight: 5
              }
            }),
            classes: {
              wrapper: classes.iconLabelWrapper
            }
          });
        } else {
          return jsx(TabMui, {
            key: id,
            label: `else ${filename}`,
            icon: jsx(MdLaptop, {
              size: "20",
              color: theme.textLightest,
              css: {
                marginRight: 5
              }
            }),
            classes: {
              wrapper: classes.iconLabelWrapper
            }
          });
        }
      });
      return tabs;
    };

    if (files.length == 1) {
      const {
        title,
        extraCreditTitle,
        isolatedPath
      } = files[0];
      return jsx(Sandbox, {
        isOpen: isOpen,
        isolatedPath: isolatedPath,
        isolatedPathLinkContent: "Ouvrir dans une page \xE0 part",
        title: extraCreditTitle != null ? extraCreditTitle : title
      }, renderedTabs.current.has(0) ? jsx("iframe", {
        title: extraCreditTitle != null ? extraCreditTitle : title,
        src: isolatedPath,
        css: {
          border: 'none',
          width: '100%',
          height: '100%'
        }
      }) : null);
    }

    return isOpen ? jsx(Tabs, {
      index: tabIndex,
      onChange: handleTabChange,
      css: tabStyles({
        theme
      })
    }, jsx(TabsMui
    /*className={classes.root}*/
    , {
      value: tabIndex,
      indicatorColor: "secondary",
      textColor: "secondary",
      onChange: handleChange,
      "aria-label": "disabled tabs example"
    }, filesToTabs()), jsx(TabPanels, null, files.map(({
      title,
      extraCreditTitle,
      isolatedPath,
      id
    }, index) => {
      var _renderedTabs$current3;

      return jsx(TabPanel, {
        key: id
      }, jsx(Sandbox, {
        isOpen: tabIndex === index,
        isolatedPath: isolatedPath,
        isolatedPathLinkContent: "Ouvrir dans une page \xE0 part",
        title: extraCreditTitle != null ? extraCreditTitle : title
      }, (_renderedTabs$current3 = renderedTabs.current) != null && _renderedTabs$current3.has(0) ? jsx("iframe", {
        title: extraCreditTitle != null ? extraCreditTitle : title,
        src: isolatedPath,
        css: {
          border: 'none',
          width: '100%',
          height: '100%'
        }
      }) : null));
    }))) : null;
  }

  FileTabs.displayName = 'FileTabs';

  function Sandbox({
    isOpen,
    isolatedPath,
    isolatedPathLinkContent,
    title,
    children
  }) {
    const renderContainerRef = React.useRef(null);
    const [height, setHeight] = React.useState(0);
    React.useLayoutEffect(() => {
      if (isOpen) {
        setHeight(getDistanceFromTopOfPage(renderContainerRef.current));
      }
    }, [isOpen]);
    return jsx(React.Fragment, null, jsx("br", null), jsx("div", {
      css: {
        display: 'flex',
        justifyContent: 'space-between',
        width: '100%',
        padding: '1rem'
      }
    }, title ? jsx("div", {
      css: {
        /* minWidth: '400px',*/
      }
    }, jsx(Alert, {
      variant: "outlined",
      severity: "info"
    }, jsx(AlertTitle, null, "Sp\xE9cificit\xE9 de l'exercice bonus"), title)) : null, jsx("a", {
      css: {
        textDecoration: 'none'
      },
      href: isolatedPath,
      target: "_blank",
      rel: "noreferrer"
    }, jsx(Button, {
      variant: "outlined"
    }, isolatedPathLinkContent))), jsx("div", {
      ref: renderContainerRef,
      css: [totallyCenteredStyles, mq({
        color: '#19212a',
        background: 'white',
        minHeight: 500,
        height: ['auto', 'auto', `calc(100vh - ${height}px)`],
        overflowY: ['auto', 'auto', 'scroll']
      })]
    }, jsx("div", {
      className: "final-container render-container"
    }, children)));
  }

  Sandbox.displayName = 'Sandbox';

  function ExerciseContainer(props) {
    const theme = useTheme();
    const classes = useStyles();
    const {
      exerciseNumber: exerciseNumberString
    } = useParams();
    const exerciseNumber = Number(exerciseNumberString);
    const [tabIndex, setTabIndex] = React.useState(0);
    const renderedTabs = React.useRef();

    if (!renderedTabs.current) {
      renderedTabs.current = new Set([0]);
    }

    function handleTabChange(index) {
      var _renderedTabs$current4;

      //console.log('handleTabChange', index)
      setTabIndex(index);
      (_renderedTabs$current4 = renderedTabs.current) == null ? void 0 : _renderedTabs$current4.add(index);
    } // allow the user to continue to the next exercise with the left/right keys


    React.useEffect(() => {
      const handleKeyup = e => {
        if (e.target !== document.body) return;

        if (e.key === 'ArrowRight') {
          const {
            number
          } = exerciseInfo[exerciseNumber + 1] || exerciseInfo[1];
          history.push(`/${number}`);
        } else if (e.key === 'ArrowLeft') {
          const {
            number
          } = exerciseInfo[exerciseNumber - 1] || exerciseInfo[exerciseInfo.length - 1];
          history.push(`/${number}`);
        }
      };

      document.body.addEventListener('keyup', handleKeyup);
      return () => document.body.removeEventListener('keyup', handleKeyup);
    }, [exerciseNumber]);

    if (isNaN(exerciseNumber) || !exerciseInfo[exerciseNumber]) {
      return jsx(NotFound, null);
    }

    const {
      instruction,
      exercise,
      final
    } = exerciseInfo[exerciseNumber];
    let instructionElement;
    const comp = lazyComponents[instruction.id]; //console.log('instruction.id', comp)

    if (comp) {
      instructionElement = /*#__PURE__*/React.createElement(comp);
    }

    const handleChange = (event, newValue) => {
      var _renderedTabs$current5;

      //console.log('handleChange', newValue)
      setTabIndex(newValue);
      (_renderedTabs$current5 = renderedTabs.current) == null ? void 0 : _renderedTabs$current5.add(newValue);
    };

    return jsx(React.Fragment, null, jsx(Navigation, {
      exerciseNumber: exerciseNumber,
      mode: props.mode,
      setMode: props.setMode
    }), jsx("div", {
      css: {
        minHeight: 'calc(100vh - 60px)'
      }
    }, jsx("div", {
      css: mq({
        display: 'grid',
        gridTemplateColumns: ['100%', '100%', '50% 50%'],
        gridTemplateRows: 'auto'
      })
    }, jsx("div", {
      css: mq({
        position: 'relative',
        gridRow: [2, 2, 'auto'],
        height: ['auto', 'auto', 'calc(100vh - 60px)'],
        overflowY: ['auto', 'auto', 'scroll'],
        padding: '1rem 2rem 3rem 2rem',
        borderTop: `1px solid ${theme.sky}`,
        '::-webkit-scrollbar': {
          background: theme.skyLight,
          borderLeft: `1px solid ${theme.sky}`,
          borderRight: `1px solid ${theme.sky}`,
          width: 10
        },
        '::-webkit-scrollbar-thumb': {
          background: theme.skyDark
        },
        'p, li': {
          fontSize: 18,
          lineHeight: 1.5
        },
        blockquote: {
          borderLeft: `2px solid ${theme.primary}`,
          margin: 0,
          paddingLeft: '1.5rem'
        },
        pre: {
          background: theme.sky,
          fontSize: '80%',
          margin: '0 -2rem',
          padding: '2rem'
        },
        ul: {
          padding: 0,
          listStylePosition: 'inside'
        },
        'ul ul': {
          paddingLeft: '2rem'
        },
        'p > code': {
          background: theme.sky,
          color: theme.text,
          fontSize: '85%',
          padding: '3px 5px'
        }
      })
    }, jsx(React.Suspense, {
      fallback: jsx("div", {
        css: totallyCenteredStyles
      }, "Loading...")
    }, jsx("div", {
      css: {
        position: 'absolute',
        top: 20,
        right: 20,
        fontSize: '1.2rem',
        color: theme.textLightest
      }
    }), jsx("div", {
      className: "instruction-container"
    }, instructionElement))), jsx("div", {
      css: {
        background: theme.background
      }
    }, jsx(Tabs, {
      index: tabIndex,
      onChange: handleTabChange,
      css: tabStyles({
        theme
      })
    }, jsx(TabsMui, {
      className: classes.root,
      value: tabIndex,
      indicatorColor: "secondary",
      textColor: "secondary",
      onChange: handleChange,
      "aria-label": "disabled tabs example"
    }, jsx(TabMui, {
      label: jsx(Tooltip, {
        title: "Le rendu se fera ci-dessous"
      }, jsx("span", null, "Exercice ", exerciseNumber)),
      icon: jsx(MdLaptop, {
        size: "20",
        color: theme.textLightest,
        css: {
          marginRight: 5
        }
      }),
      classes: {
        wrapper: classes.iconLabelWrapper
      }
    }), jsx(TabMui, {
      label: jsx(Tooltip, {
        title: "Le rendu se fera ci-dessous"
      }, jsx("span", null, "Solution")),
      icon: jsx(MdCheckCircle, {
        size: "18",
        color: theme.textLightest,
        css: {
          marginRight: 5
        }
      }),
      classes: {
        wrapper: classes.iconLabelWrapper
      }
    }), jsx(TabMui, {
      label: jsx(Tooltip, {
        title: "QCM"
      }, jsx("span", null, "QCM ", exerciseNumber)),
      icon: jsx(MdFormatListBulleted, {
        size: "20",
        color: theme.textLightest,
        css: {
          marginRight: 5
        }
      }),
      classes: {
        wrapper: classes.iconLabelWrapper
      }
    })), jsx(TabPanels, null, jsx(TabPanel, null, jsx(FileTabs, {
      key: exerciseNumber,
      isOpen: tabIndex === 0,
      files: exercise
    })), jsx(TabPanel, null, jsx(FileTabs, {
      key: exerciseNumber,
      isOpen: tabIndex === 1,
      files: final
    })), jsx(TabPanel, null, jsx(QcmDataLoader, {
      key: exerciseInfo[exerciseNumber].id,
      exerciseInfo: exerciseInfo[exerciseNumber],
      lazyComponents: lazyComponents
    }))))))));
  }

  ExerciseContainer.displayName = 'ExerciseContainer';

  function Navigation({
    exerciseNumber,
    mode,
    setMode
  }) {
    const theme = useTheme(); //const info = exerciseNumber ? exerciseInfo[exerciseNumber] : null

    const classes = useStyles(); // const [/*swithDarkMode, */setSwithDarkMode] = React.useState(
    //   mode === 'dark' ,
    // )
    // const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    //   setSwithDarkMode(event.target.checked)
    //   setMode(mode === 'light' ? 'dark' : 'light')
    //   //setState({ ...state, [event.target.name]: event.target.checked });
    // }

    return jsx(AppBarMenu, {
      projectTitle: projectTitle,
      theme: theme,
      history: history,
      exerciseNumber: exerciseNumber,
      mode: mode,
      setMode: setMode,
      exerciseInfo: exerciseInfo,
      classes: classes
    });
  }

  Navigation.displayName = 'Navigation';

  function Home(props) {
    return jsx(React.Fragment, null, jsx(Navigation, {
      mode: props.mode,
      setMode: props.setMode
    }), jsx("div", {
      css: mq({
        width: '100%',
        maxWidth: 800,
        minHeight: '85vh',
        margin: '0 auto',
        padding: '1rem',
        display: 'flex',
        flexDirection: 'column',
        alignItems: 'center',
        justifyContent: 'center'
      })
    }, jsx(Logo, {
      size: 120
      /* color={theme.skyDark}*/
      ,
      strokeWidth: 0.7,
      css: mq({
        opacity: 0.5,
        marginTop: ['3rem', 0]
      })
    }), jsx("h1", {
      css: mq({
        textAlign: 'center',
        marginBottom: ['4rem', '4rem'],
        marginTop: '3rem'
      })
    }, projectTitle), jsx("div", {
      css: mq({
        width: '100%',
        //display: 'grid',
        gridTemplateColumns: ['auto', 'auto'],
        gridGap: '1rem'
      })
    }, jsx(VerticalLinearStepper, {
      exerciseInfo: exerciseInfo
    }), jsx(Divider, {
      variant: "middle"
    }), jsx("h2", {
      style: {
        textAlign: 'center'
      }
    }, "Ils vont t'aider dans ta mission"), jsx(AccordionEmojiHelp, null))));
  }

  Home.displayName = 'Home';

  function NotFound() {
    const theme = useTheme();
    return jsx("div", {
      css: {
        height: '100vh',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        textAlign: 'center'
      }
    }, jsx("div", null, jsx(Logo, {
      size: 120,
      color: theme.skyDark,
      strokeWidth: 0.7,
      css: {
        opacity: 0.7
      }
    }), jsx("h1", null, `Désolé... Il n'y a rien ici.`), `Pour aller à un exercice, il faut aller ici `, jsx("code", null, `/exerciseNumber`), `, par exemple : `, jsx(Link, {
      to: "/1"
    }, jsx("code", null, `/1`)), jsx("div", {
      css: {
        marginTop: '2rem',
        a: {
          textDecoration: 'none'
        }
      }
    }, jsx(Link, {
      to: "/",
      css: {
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center'
      }
    }, jsx(RiArrowLeftSLine, null), "Back home"))));
  }

  NotFound.displayName = 'NotFound';

  function useDarkMode() {
    const preferDarkQuery = '(prefers-color-scheme: dark)';
    const [mode, setMode] = React.useState(() => {
      const lsVal = window.localStorage.getItem('colorMode');

      if (lsVal) {
        return lsVal === 'dark' ? 'dark' : 'light';
      } else {
        return window.matchMedia(preferDarkQuery).matches ? 'dark' : 'light';
      }
    });
    React.useEffect(() => {
      const mediaQuery = window.matchMedia(preferDarkQuery);

      const handleChange = () => {
        setMode(mediaQuery.matches ? 'dark' : 'light');
      };

      mediaQuery.addListener(handleChange);
      return () => mediaQuery.removeListener(handleChange);
    }, []);
    React.useEffect(() => {
      window.localStorage.setItem('colorMode', mode);
    }, [mode]); // we're doing it this way instead of as an effect so we only
    // set the localStorage value if they explicitly change the default

    return [mode, setMode];
  }

  function DelayedTransition() {
    // we have it this way so dark mode is rendered immediately rather than
    // transitioning to it on initial page load.
    const [renderStyles, setRender] = React.useState(false);
    React.useEffect(() => {
      const timeout = setTimeout(() => {
        setRender(true);
      }, 450);
      return () => clearTimeout(timeout);
    }, []);
    return renderStyles ? jsx(Global, {
      styles: {
        '*, *::before, *::after': {
          // for the theme change
          transition: `background 0.4s, background-color 0.4s, border-color 0.4s`
        }
        /* h3:{fontSize:"1.1em",fontStyle:"italic"},*/

      }
    }) : null;
  }

  function App() {
    const [mode, setMode] = useDarkMode();
    const theme$1 = theme(mode);
    const isDark = mode === 'dark';
    React.useLayoutEffect(() => {
      var _document$getElementB;

      (_document$getElementB = document.getElementById('root')) == null ? void 0 : _document$getElementB.classList.add('react-course-app');
    }); //Night Owl
    //https://packagecontrol.io/packages/Night%20Owl

    /* THEME 1*/

    /* primary */
    // const mainPrimaryColor = isDark ? indigo[500] : indigo[500];
    // const lightPrimaryColor = isDark ? '#757ce8' : '#757ce8';
    // const darkPrimaryColor = isDark ? indigo[700] : indigo[700];
    // const textPrimaryColor = isDark ? '#fff' : '#fff';
    // /* secondary */
    // const mainSecondaryColor = isDark ? '#ff9900' : '#03dac6';
    // const lightSecondaryColor = isDark ?  '#03dac6' :  '#03dac6';
    // const darkSecondaryColor = isDark ? '#018786' : '#018786';
    // const textSecondaryColor = isDark ? '#fff' : '#fff';
    // //other
    // const muiPaperBgColor = isDark ? 'rgb(33, 43, 54)' : '#fff';
    // const muiAccordionBgColor = isDark ? 'rgb(33, 43, 54)' : '#fff';
    // const muiAppBarBgColor = isDark ?   'rgb(33, 43, 54)' : '#fff';
    // const muiAppBarTextColor = isDark ? '#fff' : 'rgb(33, 43, 54)';

    /* THEME 2*/

    const mainPrimaryColor = isDark ? '#3f51b5' : '#90A7B2';
    const lightPrimaryColor = isDark ? '#3f51b5' : '#90A7B2';
    const darkPrimaryColor = isDark ? '#011627  ' : '#d0d7da';
    const textPrimaryColor = isDark ? '#fff' : '#fff';
    /* secondary */

    const mainSecondaryColor = isDark ? '#BC5454' : '#BC5454';
    const lightSecondaryColor = isDark ? '#BC5454  ' : '#BC5454';
    const darkSecondaryColor = isDark ? '#ff7961' : '#BC5454';
    const textSecondaryColor = isDark ? '#fff' : '#fff'; //other
    // const colorBgGradient =
    //   'linear-gradient(to right, #191b2c 0%, #212547 100%)'

    const muiPaperBgColor = isDark ? '#011627' : '#fff';
    const muiAccordionBgColor = isDark ? '#011627' : '#fff';
    const muiAppBarBgColor = isDark ? '#011627' : '#fff';
    const muiAppBarTextColor = isDark ? '#fff' : 'rgb(33, 43, 54)';
    const themeMui = createTheme({
      palette: {
        type: mode,
        primary: {
          main: mainPrimaryColor,
          light: lightPrimaryColor,
          dark: darkPrimaryColor,
          contrastText: textPrimaryColor
        },
        secondary: {
          main: mainSecondaryColor,
          light: lightSecondaryColor,
          dark: darkSecondaryColor,
          contrastText: textSecondaryColor
        }
      },
      typography: {
        fontFamily: ['Futura', 'Century Gothic', 'sans-serif', '-apple-system', 'BlinkMacSystemFont', '"Segoe UI"', 'Roboto', '"Helvetica Neue"', 'Arial', 'sans-serif', '"Apple Color Emoji"', '"Segoe UI Emoji"', '"Segoe UI Symbol"'].join(',')
      },
      overrides: {
        MuiPaper: {
          elevation0: {
            background: muiPaperBgColor
          }
        },
        MuiAccordion: {
          root: {
            backgroundColor: muiAccordionBgColor
          }
        },
        MuiAppBar: {
          colorDefault: {
            color: muiAppBarTextColor,
            backgroundColor: muiAppBarBgColor
          },
          root: {
            backgroundColor: muiAppBarBgColor
          }
        },
        MuiToolbar: {
          dense: {
            backgroundColor: theme$1.backgroundLight
          }
        },
        MuiMenu: {
          paper: {
            color: muiAppBarTextColor,
            backgroundColor: muiAppBarBgColor
          }
        },
        MuiTabs: {
          /*indicator: {
            backgroundColor: orange[700]
          }*/
        }
        /*MuiTab : { 
          root: {
            "&:hover": {
              backgroundColor: orange[700],
              color: orange[700]
            }
          },
          selected: {
            
            backgroundColor: '#720885',
            color: '#720885',
            "&:hover": {
              backgroundColor: '#2e8f4b',
              color: '#4d2020'
            }
          }
        },*/

      }
    });
    return jsx(ThemeProvider, {
      theme: themeMui
    }, jsx(ThemeProvider$1, {
      theme: theme$1
    }, jsx(Router, {
      history: history
    }, jsx(Switch, null, jsx(Route, {
      exact: true,
      path: "/"
    }, jsx(Home, {
      mode: mode,
      setMode: setMode
    })), jsx(Route, {
      exact: true,
      path: "/:exerciseNumber(\\d+)"
    }, jsx(ExerciseContainer, {
      mode: mode,
      setMode: setMode
    })), jsx(Route, null, jsx(NotFound, null)))), jsx(Global, {
      styles: {
        'html, body, #root': {
          background: theme$1.background,
          color: theme$1.text
        },
        '::selection': {
          background: theme$1.primary,
          color: 'white'
        },
        '[data-reach-tab]': {
          cursor: 'pointer'
        },
        a: {
          color: theme$1.primary
        },

        /*
        This will hide the focus indicator if the element receives focus via the mouse,
        but it will still show up on keyboard focus.
        */
        '*:focus:not(:focus-visible)': {
          outline: 'none'
        },
        hr: {
          background: theme$1.textLightest
        },
        'table, td, th': {
          border: '1px solid #ddd',
          textAlign: 'left'
        },
        table: {
          borderCollapse: 'collapse',
          width: '100%',
          margin: '15px'
        },
        'th, td': {
          padding: '15px'
        }
      }
    }), jsx(Global, {
      styles: `
              ${mode === 'light' ? prismThemeLight : prismThemeDark}
            `
    }), jsx(DelayedTransition, null)));
  }

  function ErrorFallback({
    error,
    resetErrorBoundary
  }) {
    return jsx("div", {
      css: {
        display: 'flex',
        alignItems: 'center',
        flexDirection: 'column',
        marginTop: '50px'
      }
    }, jsx("p", null, "Oh no! Il y a eu une erreur!"), jsx("div", null, jsx("p", null, `Ici l'erreur:`), jsx("pre", {
      css: {
        color: 'red',
        overflowY: 'scroll'
      }
    }, error.message)), jsx("div", null, jsx("p", null, "Essaye de faire une de ces choses pour corriger:"), jsx("ol", null, jsx("li", null, jsx("button", {
      onClick: resetErrorBoundary
    }, "Rerender the app")), jsx("li", null, jsx("button", {
      onClick: () => window.location.reload()
    }, "Rafraichir la page")), jsx("li", null, "Met \xE0 jour le code pour corriger le probl\xE8me"))));
  }

  render(jsx(ErrorBoundary, {
    FallbackComponent: ErrorFallback
  }, jsx(App, null)));
}
/*
eslint
  max-statements: "off",
  @typescript-eslint/no-non-null-assertion: "off"
*/

const styleTag = document.createElement('style');
const requiredStyles = ["/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */html{line-height:1.15;-webkit-text-size-adjust:100%}body{margin:0}main{display:block}h1{font-size:2em;margin:.67em 0}hr{box-sizing:initial;height:0;overflow:visible}pre{font-family:monospace,monospace;font-size:1em}a{background-color:initial}abbr[title]{border-bottom:none;text-decoration:underline;text-decoration:underline dotted}b,strong{font-weight:bolder}code,kbd,samp{font-family:monospace,monospace;font-size:1em}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:initial}sub{bottom:-.25em}sup{top:-.5em}img{border-style:none}button,input,optgroup,select,textarea{font-family:inherit;font-size:100%;line-height:1.15;margin:0}button,input{overflow:visible}button,select{text-transform:none}[type=button],[type=reset],[type=submit],button{-webkit-appearance:button}[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button::-moz-focus-inner{border-style:none;padding:0}[type=button]:-moz-focusring,[type=reset]:-moz-focusring,[type=submit]:-moz-focusring,button:-moz-focusring{outline:1px dotted ButtonText}fieldset{padding:.35em .75em .625em}legend{box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal}progress{vertical-align:initial}textarea{overflow:auto}[type=checkbox],[type=radio]{box-sizing:border-box;padding:0}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}details{display:block}summary{display:list-item}[hidden],template{display:none}", "body{font-family:Futura,Century Gothic,sans-serif}*,:after,:before{box-sizing:border-box}hr{opacity:.5;border:none;height:1px;max-width:100%;margin-top:30px;margin-bottom:30px}", // this will happen when running the regular app and embedding the example
// in an iframe.
// pretty sure the types are wrong on this one... (It's been fixed in TS 4.2)
// eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
window.frameElement ? `#root{display:grid;place-items:center;height:100vh;}` : ''].join('\n');
styleTag.appendChild(document.createTextNode(requiredStyles));
document.head.prepend(styleTag);
const fillScreenCenter = `padding:30px;min-height:100vh;display:grid;align-items:center;justify-content:center;`;
const originalDocumentElement = document.documentElement;
let unmount;

function makeMCRCourseApp({
  imports,
  filesInfo,
  projectTitle,
  backend,
  options = {},
  ...otherWorkshopOptions
}) {
  const lazyComponents = {};
  const componentExtensions = ['.js', '.md', '.mdx', '.tsx', '.ts'];

  for (const {
    ext,
    filePath
  } of filesInfo) {
    if (componentExtensions.includes(ext)) {
      lazyComponents[filePath] = /*#__PURE__*/React.lazy(moduleWithDefaultExport(imports, filePath));
    }
  }

  if (backend) {
    const {
      handlers,
      quiet = true,
      serviceWorker = {
        url: '/mockServiceWorker.js'
      },
      ...rest
    } = backend;

    if (process.env.NODE_ENV !== 'test') {
      const server = setup({
        handlers
      });
      void server.start({
        quiet,
        serviceWorker,
        ...rest
      });
    }
  }

  const history = createBrowserHistory();
  let previousLocation = history.location;
  let previousIsIsolated = null;

  function render(ui) {
    const rootEl = document.getElementById('root');

    if (rootEl) {
      unmount == null ? void 0 : unmount(rootEl);
    } else {
      // eslint-disable-next-line no-alert
      window.alert('Le document n\'a de div "root." Ajoute en une ou contacte Mike à propos de ce problème ...');
      return;
    }

    if (options.concurrentMode) {
      /* eslint-disable */
      // @ts-expect-error I don't care enough to be type safe here
      const root = (ReactDOM.unstable_createRoot || ReactDOM.createRoot)(rootEl);
      root.render(ui);

      unmount = () => root.unmount();
      /* eslint-enable */

    } else {
      ReactDOM.render(ui, rootEl);

      unmount = () => ReactDOM.unmountComponentAtNode(rootEl);
    }
  }

  function escapeForClassList(name) {
    // classList methods don't allow space or `/` characters
    return encodeURIComponent(name.replace(/\//g, '_'));
  }

  function handleLocationChange(location = history.location) {
    const {
      pathname
    } = location; // add location pathname to classList of the body
    // avoid the dev-tools flash of update by not updating the class name unecessarily

    const prevClassName = escapeForClassList(previousLocation.pathname);
    const newClassName = escapeForClassList(pathname);

    if (document.body.classList.contains(prevClassName)) {
      document.body.classList.remove(escapeForClassList(previousLocation.pathname));
    }

    if (!document.body.classList.contains(newClassName)) {
      document.body.classList.add(escapeForClassList(pathname));
    } // set the title to have info for the exercise


    const isIsolated = pathname.startsWith('/alone');
    let info;

    if (isIsolated) {
      const filePath = pathname.replace('/alone', 'src');
      info = filesInfo.find(i => i.filePath === filePath);
    } else {
      const number = Number(pathname.split('/').slice(-1)[0]);
      info = filesInfo.find(i => i.type === 'instruction' && i.number === number);
    }

    if (isIsolated && !info) {
      document.body.innerHTML = `
        <div style="${fillScreenCenter}">
          <div>
            Désolé .. il n'y a rien ici pour le moment. Pour acceder à un exercice , tu peux accéder à
            <code>\`/exerciseNumber\`</code>, par exemple:
            <a href="/1"><code>/1</code></a>
          </div>
        </div>
      `;
      return;
    } // I honestly have no clue why, but there appears to be some kind of
    // race condition here with the title. It seems to get reset to the
    // title that's defined in the index.html after we set it :shrugs:


    setTimeout(() => {
      const title = [info ? [info.number ? `${info.number}. ` : '', info.title || info.filename].join('') : null, projectTitle].filter(Boolean).join(' | '); // the dev-tools flash the title as changed on HMR even
      // if it's not actually changed, so we'll only change it
      // when it's necessary:

      if (document.title !== title) {
        document.title = title;
      }
    }, 20);

    if (isIsolated && info) {
      renderIsolated(moduleWithDefaultExport(imports, info.filePath));
    } else if (previousIsIsolated !== isIsolated) {
      // if we aren't going from isolated to the app, then we don't need
      // to bother rendering react anew. The app will handle that.
      renderReact();
    }

    previousLocation = location;
    previousIsIsolated = isIsolated;
  }

  function renderIsolated(isolatedModuleImport) {
    void isolatedModuleImport().then(async ({
      default: defaultExport
    }) => {
      if (history.location !== previousLocation) {
        // location has changed while we were getting the module
        // so don't bother doing anything... Let the next event handler
        // deal with it
        return;
      }

      if (typeof defaultExport === 'function') {
        if (defaultExport === DO_NOT_RENDER) {
          return;
        } // regular react component.


        render( /*#__PURE__*/React.createElement(defaultExport));
      } else if (typeof defaultExport === 'string') {
        // HTML file
        const domParser = new DOMParser();
        const newDocument = domParser.parseFromString(defaultExport, 'text/html');
        document.documentElement.replaceWith(newDocument.documentElement); // to get all the scripts to actually run, you have to create new script
        // elements, and no, cloneElement doesn't work unfortunately.
        // Apparently, scripts will only get loaded/run if you use createElement.

        const scripts = Array.from(document.querySelectorAll('script'));
        const loadingScriptsQueue = [];

        for (const script of scripts) {
          var _script$parentNode, _script$parentNode2;

          // if we're dealing with an inline script, we need to wait for all other
          // scripts to finish loading before we run it
          if (!script.hasAttribute('src')) {
            // eslint-disable-next-line no-await-in-loop
            await Promise.all(loadingScriptsQueue);
          } // replace the script


          const newScript = document.createElement('script');

          for (const attrName of script.getAttributeNames()) {
            var _script$getAttribute;

            newScript.setAttribute(attrName, (_script$getAttribute = script.getAttribute(attrName)) != null ? _script$getAttribute : '');
          }

          newScript.innerHTML = script.innerHTML;
          (_script$parentNode = script.parentNode) == null ? void 0 : _script$parentNode.insertBefore(newScript, script);
          (_script$parentNode2 = script.parentNode) == null ? void 0 : _script$parentNode2.removeChild(script); // if the new script has a src, add it to the queue

          if (script.hasAttribute('src')) {
            loadingScriptsQueue.push(new Promise(resolve => {
              newScript.onload = resolve;
            }));
          }
        } // now make sure all src scripts are loaded before continuing


        await Promise.all(loadingScriptsQueue); // Babel will call this when the DOMContentLoaded event fires
        // but because the content has already loaded, that event will never
        // fire, so we'll run it ourselves

        if (window.Babel) {
          window.Babel.transformScriptTags();
        }
      } // otherwise we'll just expect that the file ran the thing it was supposed
      // to run and doesn't need any help.

    });
  }

  function renderReact() {
    if (document.documentElement !== originalDocumentElement) {
      document.documentElement.replaceWith(originalDocumentElement);
    }

    renderReactApp({
      history,
      projectTitle,
      filesInfo,
      lazyComponents,
      render,
      ...otherWorkshopOptions
    });
  }

  history.listen(handleLocationChange); // kick it off to get us started

  handleLocationChange();
} // React.lazy *requires* that you pass it a promise that resolves to a default export
// of a function that returns JSX.Element. But we want to be able to dynamically
// import a function that we don't actually render (because that file will render itself manually)
// so we use this as the fallback for that situation and explicitely do not bother rendering it


function DO_NOT_RENDER() {
  return /*#__PURE__*/React.createElement(React.Fragment, null);
}

function moduleWithDefaultExport(imports, filePath) {
  const importFn = imports[filePath];
  if (!importFn) throw new Error(`'${filePath}' does not exist in imports.`);

  if (filePath.endsWith('html')) {
    return importFn;
  }

  return function importJS() {
    return importFn().then(module => {
      var _ref, _module$App;

      if (filePath.match(/\.mdx?$/)) targetBlankifyInstructionLinks();
      return {
        default: (_ref = (_module$App = module.App) != null ? _module$App : module.default) != null ? _ref : DO_NOT_RENDER
      };
    }, error => {
      console.error('Error importing a JS file', filePath, error);
      return {
        default: () => /*#__PURE__*/React.createElement("div", null, error.message)
      };
    });
  };
} // this is a pain, but we need to add target="_blank" to all the links
// in the markdown and even though I tried with useEffect, I couldn't
// get my useEffect to run *after* the markdown was rendered, so we're
// pulling this hack together 🙄


function targetBlankifyInstructionLinks() {
  setTimeout(() => {
    const instructionContainer = document.querySelector('.instruction-container'); // this shouldn't happen, but it could...

    if (!instructionContainer) return;
    const anchors = Array.from(instructionContainer.querySelectorAll('a'));

    for (const anchor of anchors) {
      anchor.setAttribute('target', '_blank');
      anchor.setAttribute('rel', 'noopener noreferrer nofollow');
    }
  }, 200);
}
/*
eslint
  @typescript-eslint/no-explicit-any: "off",
  @typescript-eslint/prefer-regexp-exec: "off",
  react/jsx-no-useless-fragment: "off",
  no-void: "off",
  import/no-import-module-exports : "off"
*/
//babel/no-unused-expressions: "off",

export { makeMCRCourseApp };
