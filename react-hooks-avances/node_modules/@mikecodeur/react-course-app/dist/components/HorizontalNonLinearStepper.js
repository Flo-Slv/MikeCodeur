"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = HorizontalNonLinearStepper;

var _react = _interopRequireDefault(require("react"));

var _styles = require("@material-ui/core/styles");

var _Stepper = _interopRequireDefault(require("@material-ui/core/Stepper"));

var _Step = _interopRequireDefault(require("@material-ui/core/Step"));

var _StepButton = _interopRequireDefault(require("@material-ui/core/StepButton"));

var _Button = _interopRequireDefault(require("@material-ui/core/Button"));

var _Typography = _interopRequireDefault(require("@material-ui/core/Typography"));

const useStyles = (0, _styles.makeStyles)(theme => (0, _styles.createStyles)({
  root: {
    width: '100%'
  },
  button: {
    marginRight: theme.spacing(1)
  },
  completed: {
    display: 'inline-block'
  },
  instructions: {
    marginTop: theme.spacing(1),
    marginBottom: theme.spacing(1)
  }
}));

function getSteps() {
  return ['Select campaign settings', 'Create an ad group', 'Create an ad'];
}

function getStepContent(step) {
  switch (step) {
    case 0:
      return 'Step 1: Select campaign settings...';

    case 1:
      return 'Step 2: What is an ad group anyways?';

    case 2:
      return 'Step 3: This is the bit I really care about!';

    default:
      return 'Unknown step';
  }
}

function HorizontalNonLinearStepper() {
  const classes = useStyles();

  const [activeStep, setActiveStep] = _react.default.useState(0);

  const [completed, setCompleted] = _react.default.useState({});

  const steps = getSteps();

  const totalSteps = () => {
    return steps.length;
  };

  const completedSteps = () => {
    return Object.keys(completed).length;
  };

  const isLastStep = () => {
    return activeStep === totalSteps() - 1;
  };

  const allStepsCompleted = () => {
    return completedSteps() === totalSteps();
  };

  const handleNext = () => {
    const newActiveStep = isLastStep() && !allStepsCompleted() ? // It's the last step, but not all steps have been completed,
    // find the first step that has been completed
    steps.findIndex((step, i) => !(i in completed)) : activeStep + 1;
    setActiveStep(newActiveStep);
  };

  const handleBack = () => {
    setActiveStep(prevActiveStep => prevActiveStep - 1);
  };

  const handleStep = step => () => {
    setActiveStep(step);
  };

  const handleComplete = () => {
    const newCompleted = completed;
    newCompleted[activeStep] = true;
    setCompleted(newCompleted);
    handleNext();
  };

  const handleReset = () => {
    setActiveStep(0);
    setCompleted({});
  };

  return /*#__PURE__*/_react.default.createElement("div", {
    className: classes.root
  }, /*#__PURE__*/_react.default.createElement(_Stepper.default, {
    nonLinear: true,
    activeStep: activeStep
  }, steps.map((label, index) => /*#__PURE__*/_react.default.createElement(_Step.default, {
    key: label
  }, /*#__PURE__*/_react.default.createElement(_StepButton.default, {
    onClick: handleStep(index),
    completed: completed[index]
  }, label)))), /*#__PURE__*/_react.default.createElement("div", null, allStepsCompleted() ? /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_Typography.default, {
    className: classes.instructions
  }, "All steps completed - you're finished"), /*#__PURE__*/_react.default.createElement(_Button.default, {
    onClick: handleReset
  }, "Reset")) : /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_Typography.default, {
    className: classes.instructions
  }, getStepContent(activeStep)), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_Button.default, {
    disabled: activeStep === 0,
    onClick: handleBack,
    className: classes.button
  }, "Back"), /*#__PURE__*/_react.default.createElement(_Button.default, {
    variant: "contained",
    color: "primary",
    onClick: handleNext,
    className: classes.button
  }, "Next"), activeStep !== steps.length && (completed[activeStep] ? /*#__PURE__*/_react.default.createElement(_Typography.default, {
    variant: "caption",
    className: classes.completed
  }, "Step ", activeStep + 1, " already completed") : /*#__PURE__*/_react.default.createElement(_Button.default, {
    variant: "contained",
    color: "primary",
    onClick: handleComplete
  }, completedSteps() === totalSteps() - 1 ? 'Finish' : 'Complete Step'))))));
}