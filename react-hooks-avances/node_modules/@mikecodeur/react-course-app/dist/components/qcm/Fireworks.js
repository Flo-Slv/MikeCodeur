"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Fireworks;

var _react = _interopRequireWildcard(require("react"));

var _reactCanvasConfetti = _interopRequireDefault(require("react-canvas-confetti"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function Fireworks({
  autoFire
}) {
  const [fire, setFire] = (0, _react.useState)({});
  const [reset
  /*, setReset*/
  ] = (0, _react.useState)({});
  const [count, setCount] = (0, _react.useState)(0);
  const [started, setStarted] = (0, _react.useState)(false);
  const MAX = 4;

  const randomInRange = (min, max) => {
    return Math.random() * (max - min) + min;
  }; //console.log('autoFire',autoFire)


  const getAnimationSettings = (originXA, originXB) => {
    return {
      startVelocity: 30,
      spread: 1000,
      ticks: 60,
      zIndex: 0,
      particleCount: 350,
      origin: {
        x: randomInRange(originXA, originXB),
        y: Math.random() - 0.2
      }
    };
  };

  if (autoFire && !started) {
    setFire(getAnimationSettings(0.1, 0.9));
    setStarted(true);
  } else {//setReset({})
  }

  const onFire = () => {
    //console.log('do something after fire')
    setCount(count + 1);
  };

  const onReset = () => {//console.log('do something after reset')
  };

  const onDecay = () => {
    //console.log('do something after animation')
    if (count <= MAX) {
      setFire(getAnimationSettings(0.1, 0.9));
    } else {
      setCount(0);
    }
  };

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_reactCanvasConfetti.default, {
    fire: fire,
    reset: reset // set the callback on new animation
    ,
    onFire: onFire // set the callback on decay animation
    ,
    onDecay: onDecay // set the callback on reset canvas
    ,
    onReset: onReset,
    style: {
      position: 'fixed',
      pointerEvents: 'none',
      width: '100%',
      height: '100%',
      top: 0,
      left: 0
    }
  }));
}