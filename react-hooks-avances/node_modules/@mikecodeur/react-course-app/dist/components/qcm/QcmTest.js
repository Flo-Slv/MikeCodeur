"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _styles = require("@material-ui/core/styles");

var _Paper = _interopRequireDefault(require("@material-ui/core/Paper"));

var _Typography = _interopRequireDefault(require("@material-ui/core/Typography"));

var _FormatListBulleted = _interopRequireDefault(require("@material-ui/icons/FormatListBulleted"));

var _Button = _interopRequireDefault(require("@material-ui/core/Button"));

var _Radio = _interopRequireDefault(require("@material-ui/core/Radio"));

var _Fab = _interopRequireDefault(require("@material-ui/core/Fab"));

var _Alert = _interopRequireDefault(require("@material-ui/lab/Alert"));

var _AlertTitle = _interopRequireDefault(require("@material-ui/lab/AlertTitle"));

var _LocalStorageHook = _interopRequireDefault(require("../hook/LocalStorageHook"));

var _constants = require("../../utils/constants");

var _Fireworks = _interopRequireDefault(require("./Fireworks"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

//import {QCM_RESULT} from '../../types'
const QCM_RESULT = 'QcmResult';
const useStyles = (0, _styles.makeStyles)(theme => (0, _styles.createStyles)({
  root: {
    paddingTop: 16,
    paddingBottom: 16,
    marginTop: theme.spacing.length * 3,
    width: '95%',
    margin: '0 auto',
    [theme.breakpoints.up('md')]: {
      width: '60%'
    },
    [theme.breakpoints.up('lg')]: {
      width: '40%'
    }
  },
  button: {
    pointerEvents: 'none',
    boxShadow: 'none'
  },
  questionMeta: {
    marginLeft: 10,
    display: 'inline'
  },
  footer: {
    display: 'flex',
    marginTop: '40px',
    flexWrap: 'wrap',
    flexDirection: 'row',
    justifyContent: 'flex-start'
  },
  answerOK: {
    backgroundColor: 'green'
  },
  answerKO: {
    backgroundColor: 'red'
  },
  resultAlert: {
    backgroundpaddingTop: 16,
    paddingBottom: 16,
    marginTop: theme.spacing.length * 3,
    width: '100%'
  }
}));

const QcmTest = ({
  exo
}) => {
  const classes = useStyles(); // eslint-disable-next-line @typescript-eslint/no-unused-vars

  const [qcmList, setQcmList] = (0, _react.useState)([]);
  const [quiz, setQuiz] = (0, _react.useState)([]); //const [currentQuestion, setCurrentQuestion] = useState<IQuestion>()

  const [selectedValue, setSelectedValue] = (0, _react.useState)('');
  const [current, setCurrent] = (0, _react.useState)(0);
  const [revealed, setRevealed] = (0, _react.useState)(false);
  const [loadJsonError, setLoadJsonError] = (0, _react.useState)(false);
  const [loading, setLoading] = (0, _react.useState)(true);
  const [userResult, setUserResult] = (0, _react.useState)([]); // const [projectId] = useLocalStorage<string>(QCM_CURRENT_PROJECT_ID, '');

  const projectId = window.localStorage.getItem(_constants.QCM_CURRENT_PROJECT_ID);
  const [qcmAllResults, setQcmAllResults] = (0, _LocalStorageHook.default)(`${QCM_RESULT}-${projectId}`, [{
    exerciseId: exo.id,
    result: []
  }]); //console.log('exo.id', exo.id)
  //console.log('useLocalStorage', qcmAllResults)
  //setName({})
  //used to load JSON from in html container

  (0, _react.useEffect)(() => {
    //console.log('useEffect exo1', qcmList)
    const timer = setTimeout(() => {
      const el1 = document.querySelector('.qcm-container');
      setUserResult([]); //@todo: catch err

      try {
        const data = JSON.parse(`${el1 == null ? void 0 : el1.innerHTML}`);
        const qcm = data.find(res => res.exerciseId === exo.id);
        setCurrent(0);

        if (qcm != null && qcm.quiz) {
          setQuiz(qcm.quiz); //setCurrentQuestion(qcm.quiz[0])
        } else {
          setQuiz([]);
        }

        setLoading(false);
      } catch (err) {
        setLoadJsonError(true);
        setLoading(false);
      }
    }, 400);
    return () => clearTimeout(timer);
  }, []);

  const checkUserResult = () => {
    const foundErrResult = userResult.filter(el => el == false); //console.log(foundErrResult)

    return foundErrResult.length == 0;
  };

  const validateQCM = () => {
    if (checkUserResult()) {
      //window.localStorage.setItem(`exo-${exo?.id}`,'true')
      let qcmResultForExercice = qcmAllResults.find(res => res.exerciseId === exo.id); //console.log("qcmResultForExercice",qcmResultForExercice);

      if (qcmResultForExercice) {
        qcmResultForExercice.result = userResult;
        const updateList = qcmAllResults.map(res => {
          return res.exerciseId === exo.id ? qcmResultForExercice : res;
        });
        setQcmAllResults([...updateList]);
      } else {
        qcmResultForExercice = {
          exerciseId: exo.id,
          result: userResult
        }; //hook to store in JSON

        setQcmAllResults([...qcmAllResults, qcmResultForExercice]);
      }
    }
  };

  const nbError = userResult.filter(el => el == false).length;
  const resultContainError = nbError > 0;

  const handleChange = event => {
    setSelectedValue(event.target.value);
  };

  const moveNext = () => {
    setSelectedValue('');
    setRevealed(false);
    setCurrent(current + 1);
  };

  const movePrevious = () => {
    userResult.splice(current, 1);
    setSelectedValue('');
    setUserResult(userResult);
    setRevealed(false);
    setCurrent(current - 1);
  }; //render correct false anwser class


  const renderClassQuiz = index => {
    const isChecked = selectedValue === index.toString();
    let radioClass = '';

    if (revealed) {
      if (isChecked) {
        radioClass = quiz[current].answer === `${index}` ? classes.answerOK : classes.answerKO;
      } else {
        radioClass = quiz[current].answer === `${index}` ? classes.answerOK : '';
      }
    }

    return radioClass;
  }; //const currentExercice: number = 0 //exemple : 05 - Formulaire en React
  //QCM questions
  //const question: IQuestion = qcmList[currentExercice]?.quiz[current]


  const question = quiz[current];
  const curQuestion = current + 1;
  const size = quiz.length;
  const moveRight = current + 1 < quiz.length;
  const moveLeft = current == 0;
  const qcmFinish = quiz.length == userResult.length;

  const handleReveal = () => {
    if (selectedValue === question.answer) {
      userResult[current] = true;
    } else {
      userResult[current] = false;
    }

    setUserResult(userResult);
    setRevealed(true);
  }; //console.log('userResult', userResult)


  if (loading) {
    return /*#__PURE__*/_react.default.createElement("div", {
      style: {
        textAlign: 'center'
      }
    }, "chargement ...");
  }

  if (loadJsonError) {
    return /*#__PURE__*/_react.default.createElement("div", {
      style: {
        textAlign: 'center'
      }
    }, "Impossible de charger le JSON");
  }

  if (quiz.length < 1) {
    return /*#__PURE__*/_react.default.createElement("div", {
      style: {
        textAlign: 'center'
      }
    }, "Pas de QCM pour cet exercice");
  } //const language = 'javascript'


  return /*#__PURE__*/_react.default.createElement(_react.default.Suspense, {
    fallback: /*#__PURE__*/_react.default.createElement("div", null, "Loading...")
  }, /*#__PURE__*/_react.default.createElement(_Fireworks.default, {
    autoFire: qcmFinish && !resultContainError
  }), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_Paper.default, {
    className: classes.root,
    elevation: 0
  }, /*#__PURE__*/_react.default.createElement(_Typography.default, {
    component: "p",
    style: {
      marginBottom: '30px'
    }
  }, /*#__PURE__*/_react.default.createElement(_Fab.default, {
    color: "primary",
    "aria-label": "add",
    className: classes.button
  }, /*#__PURE__*/_react.default.createElement(_FormatListBulleted.default, null)), /*#__PURE__*/_react.default.createElement("span", {
    className: classes.questionMeta
  }, ' ', "Question # ", curQuestion, " / ", size)), /*#__PURE__*/_react.default.createElement(_Typography.default, {
    component: "h5"
  }, "Module : ", exo.description), /*#__PURE__*/_react.default.createElement("hr", {
    style: {
      marginBottom: '20px',
      marginTop: '5px'
    }
  }), /*#__PURE__*/_react.default.createElement(_Typography.default, {
    component: "h1",
    style: {
      fontSize: '1.2rem'
    }
  }, /*#__PURE__*/_react.default.createElement("div", {
    dangerouslySetInnerHTML: {
      __html: question.question
    }
  })), question.options.map((opt, index) => /*#__PURE__*/_react.default.createElement("div", {
    key: index,
    style: {
      marginTop: '5px'
    },
    className: renderClassQuiz(index)
  }, /*#__PURE__*/_react.default.createElement(_Radio.default, {
    checked: selectedValue === index.toString(),
    onChange: handleChange,
    value: index.toString(),
    name: "radio-button-demo",
    "aria-label": "A"
  }), /*#__PURE__*/_react.default.createElement("span", {
    dangerouslySetInnerHTML: {
      __html: opt
    }
  }))), /*#__PURE__*/_react.default.createElement("div", {
    className: classes.footer
  }, qcmFinish ? /*#__PURE__*/_react.default.createElement(_Button.default, {
    variant: "contained",
    onClick: validateQCM,
    color: "secondary",
    disabled: resultContainError || !revealed,
    style: {
      marginRight: 'auto',
      marginTop: '10px'
    }
  }, "Valider le QCM") : /*#__PURE__*/_react.default.createElement(_Button.default, {
    variant: "contained",
    onClick: handleReveal,
    color: "primary",
    disabled: selectedValue === '',
    style: {
      marginRight: 'auto',
      marginTop: '10px'
    }
  }, "Valider"), /*#__PURE__*/_react.default.createElement(_Button.default, {
    variant: "outlined",
    onClick: movePrevious,
    disabled: moveLeft,
    color: "primary",
    style: {
      marginRight: '20px',
      marginTop: '10px'
    }
  }, "Pr\xE9c\xE9dent"), /*#__PURE__*/_react.default.createElement(_Button.default, {
    variant: "outlined",
    onClick: moveNext,
    color: "primary",
    disabled: !moveRight || !revealed,
    style: {
      marginTop: '10px'
    }
  }, "Suivant")), /*#__PURE__*/_react.default.createElement("br", null), /*#__PURE__*/_react.default.createElement("br", null), qcmFinish && resultContainError ? /*#__PURE__*/_react.default.createElement(_Paper.default, {
    className: classes.resultAlert,
    elevation: 0
  }, /*#__PURE__*/_react.default.createElement(_Alert.default, {
    variant: "outlined",
    severity: "error"
  }, /*#__PURE__*/_react.default.createElement(_AlertTitle.default, null, "Tu n'as pas encore r\xE9ussi le QCM"), "Pas de panique ! Tu n'as que ", nbError, " erreur(s) \xE0 corriger")) : null, qcmFinish && !resultContainError ? /*#__PURE__*/_react.default.createElement(_Paper.default, {
    className: classes.resultAlert,
    elevation: 0
  }, /*#__PURE__*/_react.default.createElement(_Alert.default, {
    variant: "outlined",
    severity: "success"
  }, /*#__PURE__*/_react.default.createElement(_AlertTitle.default, null, "F\xE9licitation !"), "Tu peux maintenant valider cet exercice, tu es pret pour la suite \uD83C\uDF89")) : null)));
};

var _default = QcmTest;
/*
eslint
  @typescript-eslint/no-explicit-any: "off",
*/

exports.default = _default;