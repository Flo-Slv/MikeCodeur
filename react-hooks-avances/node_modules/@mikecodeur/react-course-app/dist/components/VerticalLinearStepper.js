"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = VerticalLinearStepper;

var _react = _interopRequireDefault(require("react"));

var _styles = require("@material-ui/core/styles");

var _Stepper = _interopRequireDefault(require("@material-ui/core/Stepper"));

var _Step = _interopRequireDefault(require("@material-ui/core/Step"));

var _StepContent = _interopRequireDefault(require("@material-ui/core/StepContent"));

var _Button = _interopRequireDefault(require("@material-ui/core/Button"));

var _Paper = _interopRequireDefault(require("@material-ui/core/Paper"));

var _Typography = _interopRequireDefault(require("@material-ui/core/Typography"));

var _StepButton = _interopRequireDefault(require("@material-ui/core/StepButton"));

var _reactRouterDom = require("react-router-dom");

var _Tooltip = _interopRequireDefault(require("@material-ui/core/Tooltip"));

var _CheckCircle = _interopRequireDefault(require("@material-ui/icons/CheckCircle"));

var _constants = require("../utils/constants");

var _LocalStorageHook = _interopRequireDefault(require("./hook/LocalStorageHook"));

const useStyles = (0, _styles.makeStyles)(theme => (0, _styles.createStyles)({
  root: {
    width: '100%'
  },
  button: {
    marginTop: theme.spacing(1),
    marginRight: theme.spacing(1)
  },
  actionsContainer: {
    marginBottom: theme.spacing(2)
  },
  resetContainer: {
    padding: theme.spacing(3)
  },
  buttonNavTextWrap: {
    marginTop: theme.spacing(1),
    marginRight: theme.spacing(1),
    maxWidth: '250px',
    whiteSpace: 'nowrap',
    overflow: 'hidden',
    textOverflow: 'ellipsis'
  },
  labelNavTextWrap: {
    maxWidth: '100%',
    whiteSpace: 'nowrap',
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    [theme.breakpoints.down('xs')]: {
      maxWidth: '70px'
      /* backgroundColor:"red",
      whiteSpace: 'nowrap',
      overflow: 'hidden',
      textOverflow: 'ellipsis',*/

    } // [theme.breakpoints.down('sm')]: {
    //   maxWidth: '100%',
    //   backgroundColor:"red",
    // },
    // [theme.breakpoints.up('md')]: {
    //   maxWidth: '90px',
    //   backgroundColor:"blue",
    // },
    // [theme.breakpoints.up('lg')]: {
    //   maxWidth: '100%',
    //   backgroundColor:"green",
    // },

  } // stepButton: {
  //   '&:hover': {
  //     color: '#f00',
  //   },
  // },

}));

function getStepContentExerciseInfo(exerciseInfo) {
  const content = `Exercice : ${exerciseInfo.description}. `;
  return content;
}

function VerticalLinearStepper(props) {
  //export default function VerticalLinearStepper(exerciseInfo: Array<ExerciseInfo>): React.ReactElement {
  const steps = props.exerciseInfo;
  const classes = useStyles();

  const [activeStep, setActiveStep] = _react.default.useState(0);

  const [completed
  /*, setCompleted*/
  ] = _react.default.useState({}); //const steps = exerciseInfoStep//getSteps(/*exerciseInfo*/);
  //const [projectId] = useLocalStorage<string>(QCM_CURRENT_PROJECT_ID, '');


  const projectId = window.localStorage.getItem(_constants.QCM_CURRENT_PROJECT_ID);
  const [qcmAllResults, setQcmAllResults] = (0, _LocalStorageHook.default)(`${_constants.QCM_RESULT}-${projectId}`, []);

  const totalSteps = () => {
    return steps.length;
  };

  const completedSteps = () => {
    return Object.keys(completed).length;
  };

  const isLastStep = () => {
    return activeStep === totalSteps() - 1;
  };

  const allStepsCompleted = () => {
    return completedSteps() === totalSteps();
  };

  const handleNext = () => {
    const newActiveStep = isLastStep() && !allStepsCompleted() ? // It's the last step, but not all steps have been completed,
    // find the first step that has been completed
    steps.findIndex((step, i) => !(i in completed)) : activeStep + 1;
    setActiveStep(newActiveStep); //console.log('newActiveStep', newActiveStep)
  };

  const handleBack = () => {
    setActiveStep(prevActiveStep => prevActiveStep - 1);
  };

  const handleStep = step => () => {
    setActiveStep(step);
  };

  const handleReset = () => {
    setActiveStep(0);
    setQcmAllResults([]);
  };

  const isExerciceQCMValidate = exerciceID => {
    //console.log('qcmAllResults', qcmAllResults)
    return !!qcmAllResults.find(res => res.exerciseId == exerciceID);
  };

  return /*#__PURE__*/_react.default.createElement("div", {
    className: classes.root
  }, /*#__PURE__*/_react.default.createElement(_Stepper.default, {
    nonLinear: true,
    activeStep: activeStep,
    orientation: "vertical"
  }, steps.filter(Boolean).map((
  /*{id, number, title, final, exercise}*/
  exercise, index) => {
    var _exercise$exercise$, _exercise$final$;

    return /*#__PURE__*/_react.default.createElement(_Step.default, {
      key: index
    }, /*#__PURE__*/_react.default.createElement(_Tooltip.default, {
      title: getStepContentExerciseInfo(exercise)
    }, /*#__PURE__*/_react.default.createElement(_StepButton.default, {
      onClick: handleStep(index),
      completed: completed[index]
    }, exercise.title)), /*#__PURE__*/_react.default.createElement(_StepContent.default, null, /*#__PURE__*/_react.default.createElement(_Typography.default, {
      variant: "h6"
    }, getStepContentExerciseInfo(exercise)), /*#__PURE__*/_react.default.createElement("br", null), /*#__PURE__*/_react.default.createElement("div", {
      className: classes.actionsContainer
    }, isExerciceQCMValidate(exercise.id) ? /*#__PURE__*/_react.default.createElement(_Typography.default, null, /*#__PURE__*/_react.default.createElement(_CheckCircle.default, {
      style: {
        color: _constants.QCM_FINISH_ICON_COLOR
      }
    }), "\xA0 Bravo cet exercice est termin\xE9") : /*#__PURE__*/_react.default.createElement(_Tooltip.default, {
      title: 'Pour le valider, suis le cours et valide le QCM'
    }, /*#__PURE__*/_react.default.createElement(_Typography.default, null, /*#__PURE__*/_react.default.createElement(_CheckCircle.default, {
      style: {
        color: _constants.QCM_NOT_FINISH_ICON_COLOR
        /*'red'*/

      }
    }), "\xA0 Cet exercice n'a pas encore \xE9t\xE9 valid\xE9")), /*#__PURE__*/_react.default.createElement("br", null), /*#__PURE__*/_react.default.createElement("div", {
      style: {
        display: 'flex',
        justifyContent: 'flex-start'
      }
    }, /*#__PURE__*/_react.default.createElement(_reactRouterDom.Link, {
      to: `/${exercise.number}`,
      style: {
        color: 'inherit',
        textDecoration: 'none'
      }
    }, /*#__PURE__*/_react.default.createElement(_Button.default, {
      variant: "contained",
      color: "primary",
      className: classes.button
      /*NavTextWrap*/

    }, /*#__PURE__*/_react.default.createElement("div", {
      className: classes.labelNavTextWrap
    }, "Acc\xE9der \xE0 l'exercice"))), /*#__PURE__*/_react.default.createElement("a", {
      href: (_exercise$exercise$ = exercise.exercise[0]) == null ? void 0 : _exercise$exercise$.isolatedPath,
      title: "Voir le rendu de l'exercice",
      style: {
        color: 'inherit',
        textDecoration: 'none',
        marginLeft: 'auto'
      }
    }, /*#__PURE__*/_react.default.createElement(_Button.default, {
      variant: "contained",
      color: "primary",
      className: classes.button,
      style: {
        marginLeft: 'auto'
      }
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: classes.labelNavTextWrap
    }, "R\xE9sultat"))), /*#__PURE__*/_react.default.createElement("a", {
      href: (_exercise$final$ = exercise.final[0]) == null ? void 0 : _exercise$final$.isolatedPath,
      title: "Voir la solution",
      style: {
        color: 'inherit',
        textDecoration: 'none'
      }
    }, /*#__PURE__*/_react.default.createElement(_Button.default, {
      variant: "contained",
      color: "secondary",
      className: classes.button
    }, /*#__PURE__*/_react.default.createElement("div", {
      className: classes.labelNavTextWrap
    }, "Solution")))), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_Button.default, {
      variant: "outlined",
      disabled: activeStep === 0,
      onClick: handleBack,
      className: classes.button
    }, '< Exercice précédent'), /*#__PURE__*/_react.default.createElement(_Button.default, {
      variant: "outlined",
      onClick: handleNext,
      className: classes.button
    }, activeStep === steps.length - 1 ? 'Fin' : 'Exercice suivant >')))));
  })), activeStep === steps.length - 1 && /*#__PURE__*/_react.default.createElement(_Paper.default, {
    square: true,
    elevation: 0,
    className: classes.resetContainer
  }, /*#__PURE__*/_react.default.createElement(_Typography.default, null, "Tous les exercices sont finis - Tu'as fini"), /*#__PURE__*/_react.default.createElement(_Button.default, {
    variant: "outlined",
    onClick: handleReset,
    className: classes.button
  }, "Recommencer"), /*#__PURE__*/_react.default.createElement("br", null), /*#__PURE__*/_react.default.createElement("br", null), /*#__PURE__*/_react.default.createElement(_Typography.default, null, "(cela va vider l'historique des QCM)")));
}