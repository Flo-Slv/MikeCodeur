"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = AppBarMenu;

var _react = _interopRequireDefault(require("react"));

var _AppBar = _interopRequireDefault(require("@material-ui/core/AppBar"));

var _Toolbar = _interopRequireDefault(require("@material-ui/core/Toolbar"));

var _IconButton = _interopRequireDefault(require("@material-ui/core/IconButton"));

var _MenuItem = _interopRequireDefault(require("@material-ui/core/MenuItem"));

var _Menu = _interopRequireDefault(require("@material-ui/core/Menu"));

var _MoreVert = _interopRequireDefault(require("@material-ui/icons/MoreVert"));

var _Tooltip = _interopRequireDefault(require("@material-ui/core/Tooltip"));

var _Switch = _interopRequireDefault(require("@material-ui/core/Switch"));

var _reactRouterDom = require("react-router-dom");

var _Button = _interopRequireDefault(require("@material-ui/core/Button"));

var _styles = require("@material-ui/core/styles");

var _core = require("@emotion/core");

var _facepaint = _interopRequireDefault(require("facepaint"));

var _ri = require("react-icons/ri");

var _logo = _interopRequireDefault(require("../assets/logo"));

var _constants = require("../utils/constants");

var _LocalStorageHook = _interopRequireDefault(require("./hook/LocalStorageHook"));

var _CheckCircle = _interopRequireDefault(require("@material-ui/icons/CheckCircle"));

var _ProgressBar = _interopRequireDefault(require("./ProgressBar"));

/** @jsx jsx */

/** @jsxFrag React.Fragment */

/* eslint-disable import/no-named-default */

/* eslint-disable @typescript-eslint/no-explicit-any */
//  const QCM_RESULT = 'QcmResult';
//  const QCM_FINISH_ICON_COLOR = 'green';
//  const QCM_NOT_FINISH_ICON_COLOR = 'grey';
const useStyles = (0, _styles.makeStyles)(theme => (0, _styles.createStyles)({
  grow: {
    flexGrow: 1,
    overflow: 'hidden'
  },
  menuButton: {
    marginRight: theme.spacing(2)
  },
  title: {
    display: 'none',
    [theme.breakpoints.up('sm')]: {
      display: 'block'
    }
  },
  search: {
    position: 'relative',
    borderRadius: theme.shape.borderRadius,
    backgroundColor: (0, _styles.alpha)(theme.palette.common.white, 0.15),
    '&:hover': {
      backgroundColor: (0, _styles.alpha)(theme.palette.common.white, 0.25)
    },
    marginRight: theme.spacing(2),
    marginLeft: 0,
    width: '100%',
    [theme.breakpoints.up('sm')]: {
      marginLeft: theme.spacing(3),
      width: 'auto'
    }
  },
  searchIcon: {
    padding: theme.spacing(0, 2),
    height: '100%',
    position: 'absolute',
    pointerEvents: 'none',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center'
  },
  inputRoot: {
    color: 'inherit'
  },
  inputInput: {
    padding: theme.spacing(1, 1, 1, 0),
    // vertical padding + font size from searchIcon
    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,
    transition: theme.transitions.create('width'),
    width: '100%',
    [theme.breakpoints.up('md')]: {
      width: '20ch'
    }
  },
  sectionDesktop: {
    display: 'none',
    [theme.breakpoints.up('md')]: {
      display: 'flex'
    }
  },
  sectionMobile: {
    display: 'flex',
    [theme.breakpoints.up('md')]: {
      display: 'none'
    }
  }
}));
const visuallyHiddenStyles = {
  border: '0',
  clip: 'rect(0 0 0 0)',
  height: '1px',
  margin: '-1px',
  overflow: 'hidden',
  padding: '0',
  position: 'absolute',
  width: '1px'
};
const mq = (0, _facepaint.default)(['@media(min-width: 576px)', '@media(min-width: 768px)', '@media(min-width: 992px)', '@media(min-width: 1200px)']);

function AppBarMenu({
  exerciseNumber,
  mode,
  setMode,
  exerciseInfo,
  classes,
  history,
  theme,
  projectTitle
}) {
  const classesInt = useStyles(); //   const useTheme = () => useEmotionTheme<Theme>()
  //   //const theme = useTheme()

  const themeMui = (0, _styles.useTheme)();

  const [anchorEl, setAnchorEl] = _react.default.useState(null);

  const [mobileMoreAnchorEl, setMobileMoreAnchorEl] = _react.default.useState(null);

  const [swithDarkMode, setSwithDarkMode] = _react.default.useState(mode === 'dark'); //const [projectId] = useLocalStorage<string>(QCM_CURRENT_PROJECT_ID, '');


  const projectId = window.localStorage.getItem(_constants.QCM_CURRENT_PROJECT_ID);
  const [qcmAllResults] = (0, _LocalStorageHook.default)(`${_constants.QCM_RESULT}-${projectId}`, []);

  const handleChange = event => {
    setSwithDarkMode(event.target.checked);
    setMode(mode === 'light' ? 'dark' : 'light'); //setState({ ...state, [event.target.name]: event.target.checked });
  };

  const isMenuOpen = Boolean(anchorEl);
  const isMobileMenuOpen = Boolean(mobileMoreAnchorEl);
  const info = exerciseNumber ? exerciseInfo[exerciseNumber] : null;

  const handleMobileMenuClose = () => {
    setMobileMoreAnchorEl(null);
  };

  const handleMenuClose = () => {
    setAnchorEl(null);
    handleMobileMenuClose();
  };

  const handleMobileMenuOpen = event => {
    setMobileMoreAnchorEl(event.currentTarget);
  };

  const handleNavigate = (event, e) => {
    event.preventDefault();
    history.push(`/${e.number}`);
    setMobileMoreAnchorEl(null);
  };

  const menuId = 'primary-search-account-menu';
  const renderMenu = (0, _core.jsx)(_Menu.default, {
    anchorEl: anchorEl,
    anchorOrigin: {
      vertical: 'top',
      horizontal: 'right'
    },
    id: menuId,
    keepMounted: true,
    transformOrigin: {
      vertical: 'top',
      horizontal: 'right'
    },
    open: isMenuOpen,
    onClose: handleMenuClose
  }, (0, _core.jsx)(_MenuItem.default, {
    onClick: handleMenuClose
  }, "Profile"), (0, _core.jsx)(_MenuItem.default, {
    onClick: handleMenuClose
  }, "My account"));
  const mobileMenuId = 'primary-search-account-menu-mobile';

  const isExerciceQCMValidate = exerciceID => {
    //console.log("qcmAllResults",qcmAllResults)
    return !!qcmAllResults.find(res => res.exerciseId == exerciceID);
  };

  const renderMobileMenu = () => {
    return (0, _core.jsx)(_Menu.default, {
      anchorEl: mobileMoreAnchorEl,
      anchorOrigin: {
        vertical: 'top',
        horizontal: 'right'
      },
      keepMounted: true,
      transformOrigin: {
        vertical: 'top',
        horizontal: 'right'
      },
      open: isMobileMenuOpen,
      onClose: handleMobileMenuClose
    }, exerciseInfo.map((e, index) => (0, _core.jsx)(_MenuItem.default, {
      key: index,
      selected: e.id === mobileMenuId,
      onClick: event => {
        handleNavigate(event, e);
      }
    }, isExerciceQCMValidate(e.id) ? (0, _core.jsx)(_CheckCircle.default, {
      style: {
        color: _constants.QCM_FINISH_ICON_COLOR
      }
    }) : (0, _core.jsx)(_CheckCircle.default, {
      style: {
        color: _constants.QCM_NOT_FINISH_ICON_COLOR
      }
    }), (0, _core.jsx)("p", null, "\xA0 ", e.title))));
  }; // <Menu
  //   anchorEl={mobileMoreAnchorEl}
  //   anchorOrigin={{vertical: 'top', horizontal: 'right'}}
  //   id={mobileMenuId}
  //   keepMounted
  //   transformOrigin={{vertical: 'top', horizontal: 'right'}}
  //   open={isMobileMenuOpen}
  //   onClose={handleMobileMenuClose}
  // >
  //   <MenuItem>
  //     <IconButton aria-label="show 4 new mails" color="inherit">
  //       <Badge badgeContent={4} color="secondary">
  //         <MailIcon />
  //       </Badge>
  //     </IconButton>
  //     <p>Messages mob</p>
  //   </MenuItem>
  //   <MenuItem>
  //     <IconButton aria-label="show 11 new notifications" color="inherit">
  //       <Badge badgeContent={11} color="secondary">
  //         <NotificationsIcon />
  //       </Badge>
  //     </IconButton>
  //     <p>Notifications</p>
  //   </MenuItem>
  //   <MenuItem onClick={handleProfileMenuOpen}>
  //     <IconButton
  //       aria-label="account of current user"
  //       aria-controls="primary-search-account-menu"
  //       aria-haspopup="true"
  //       color="inherit"
  //     >
  //       <AccountCircle />
  //     </IconButton>
  //     <p>Profile</p>
  //   </MenuItem>
  // </Menu>


  const SwitchCompo = (0, _core.jsx)("div", {
    css: {
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'flex-end'
    }
  }, (0, _core.jsx)(_Tooltip.default, {
    title: "Switch Dark Mode"
  }, (0, _core.jsx)(_Switch.default, {
    checked: swithDarkMode,
    color: "primary",
    onChange: handleChange,
    name: "checkedA",
    inputProps: {
      'aria-label': 'primary checkbox'
    }
  })));
  return (0, _core.jsx)("div", {
    style: {
      overflow: 'hidden'
    }
  }, (0, _core.jsx)(_AppBar.default, {
    position: "relative",
    color: "default"
  }, (0, _core.jsx)(_Toolbar.default, {
    variant: "dense",
    style: {
      overflow: 'hidden'
    }
  }, (0, _core.jsx)("div", {
    css: mq({
      a: {
        textDecoration: 'none'
      },
      alignItems: 'center',
      background: theme.backgroundLight,
      boxShadow: '0 0.9px 1.5px -18px rgba(0, 0, 0, 0.024), 0 2.4px 4.1px -18px rgba(0, 0, 0, 0.035), 0 5.7px 9.9px -18px rgba(0, 0, 0, 0.046), 0 19px 33px -18px rgba(0, 0, 0, 0.07)',
      display: 'grid',
      gridTemplateColumns: exerciseNumber ? ['3fr .5fr', '1fr 2fr', '1fr 1fr'] : '1fr 1fr',
      height: 60,
      padding: ['0 0rem', '0 0.0rem'],
      width: '100%',
      'span[role="img"]': {
        fontSize: [24, 24, 'inherit']
      },
      '.exercise-title': {
        color: theme.text,
        display: ['none', 'inline-block', 'inline-block'],
        fontSize: 15,
        opacity: 0.9,
        ':hover': {
          opacity: 1
        }
      }
    })
  }, (0, _core.jsx)("div", {
    css: {
      display: 'flex',
      alignItems: 'center'
    }
  }, (0, _core.jsx)(_reactRouterDom.Link, {
    to: "/",
    css: {
      display: 'flex',
      alignItems: 'center',
      color: 'inherit',
      textDecoration: 'none'
    }
  }, (0, _core.jsx)(_logo.default, {
    css: {
      marginRight: '.5rem'
    },
    strokeWidth: 0.8
  }), (0, _core.jsx)("div", {
    css: {
      display: 'flex',
      flexDirection: 'column',
      marginLeft: '.5rem'
    }
  }, (0, _core.jsx)("h1", {
    css: {
      fontSize: 16,
      margin: 0
    }
  }, projectTitle), (0, _core.jsx)("span", {
    css: {
      fontSize: 14,
      opacity: '.8'
    }
  }, "Mike Codeur"))), (0, _core.jsx)(_ProgressBar.default, {
    exoLength: exerciseInfo.length
  })), (0, _core.jsx)("div", {
    className: classesInt.sectionDesktop
  }, (0, _core.jsx)("div", {
    css: {
      alignItems: 'center',
      display: 'grid',
      gridTemplateColumns: exerciseNumber ? '3fr 2fr 3fr 3rem' : '1fr',
      paddingLeft: '1rem',
      width: '100%'
    }
  }, info ? (0, _core.jsx)(_react.default.Fragment, null, (0, _core.jsx)("div", null, info.previous ? (0, _core.jsx)(_reactRouterDom.Link, {
    to: `/${info.previous.number}`,
    css: {
      display: 'flex',
      alignItems: 'center',
      textDecoration: 'none'
    }
  }, (0, _core.jsx)(_ri.RiArrowLeftSLine, {
    size: 20
  }), (0, _core.jsx)(_Button.default, {
    variant: "outlined",
    className: classes.buttonNavTextWrap
  }, (0, _core.jsx)("div", {
    className: classes.labelNavTextWrap
  }, info.previous.title))) : null), (0, _core.jsx)("div", {
    css: {
      display: 'flex',
      alignItems: 'center',
      justifyContent: 'center'
    }
  }, exerciseInfo.map(e => (0, _core.jsx)(_react.default.Fragment, {
    key: e.id
  }, (0, _core.jsx)("input", {
    id: `exercise-dot-${e.id}`,
    type: "radio",
    name: "exercise-dots",
    checked: e.id === info.id,
    onChange: () => history.push(`/${e.number}`),
    css: visuallyHiddenStyles
  }), (0, _core.jsx)("label", {
    htmlFor: `exercise-dot-${e.id}`,
    title: e.title
  }, (0, _core.jsx)("span", {
    css: visuallyHiddenStyles
  }, e.title), (0, _core.jsx)("span", {
    css: {
      cursor: 'pointer',
      display: 'block',
      background: e.id === info.id ? themeMui.palette.secondary.main : themeMui.palette.primary.main,
      borderRadius: '50%',
      height: 12,
      width: 12,
      margin: '0 6px'
    }
  }))))), (0, _core.jsx)("div", {
    css: {
      textAlign: 'right'
    }
  }, info.next ? (0, _core.jsx)(_reactRouterDom.Link, {
    to: `/${info.next.number}`,
    css: {
      alignItems: 'center',
      display: 'flex',
      justifyContent: 'flex-end',
      textDecoration: 'none'
    }
  }, (0, _core.jsx)(_Button.default, {
    variant: "outlined",
    className: classes.buttonNavTextWrap
  }, (0, _core.jsx)("div", {
    className: classes.labelNavTextWrap
  }, info.next.title)), ' ', (0, _core.jsx)(_ri.RiArrowRightSLine, {
    size: 20
  })) : null)) : null, SwitchCompo)), (0, _core.jsx)("div", {
    className: classesInt.sectionMobile,
    style: {
      marginLeft: 'auto'
    }
  }, SwitchCompo, (0, _core.jsx)(_IconButton.default, {
    "aria-label": "show more",
    "aria-controls": mobileMenuId,
    "aria-haspopup": "true",
    onClick: handleMobileMenuOpen,
    color: "inherit"
  }, (0, _core.jsx)(_MoreVert.default, null)))))), renderMobileMenu(), renderMenu);
}