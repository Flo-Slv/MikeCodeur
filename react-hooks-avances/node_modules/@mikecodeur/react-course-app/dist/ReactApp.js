"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.renderReactApp = renderReactApp;

var _react = _interopRequireDefault(require("react"));

var _core = require("@emotion/core");

var _facepaint = _interopRequireDefault(require("facepaint"));

var _emotionTheming = require("emotion-theming");

var _reactErrorBoundary = require("react-error-boundary");

var _reactRouterDom = require("react-router-dom");

var _tabs = require("@reach/tabs");

var _styles = require("@material-ui/core/styles");

var _Button = _interopRequireDefault(require("@material-ui/core/Button"));

var _Tabs = _interopRequireDefault(require("@material-ui/core/Tabs"));

var _Tab = _interopRequireDefault(require("@material-ui/core/Tab"));

var _Tooltip = _interopRequireDefault(require("@material-ui/core/Tooltip"));

var _Alert = _interopRequireDefault(require("@material-ui/lab/Alert"));

var _AlertTitle = _interopRequireDefault(require("@material-ui/lab/AlertTitle"));

var _ri = require("react-icons/ri");

var _md = require("react-icons/md");

var _Divider = _interopRequireDefault(require("@material-ui/core/Divider"));

var _VerticalLinearStepper = _interopRequireDefault(require("./components/VerticalLinearStepper"));

var _QcmDataLoader = _interopRequireDefault(require("./components/qcm/QcmDataLoader"));

var _AccordionEmojiHelp = _interopRequireDefault(require("./components/AccordionEmojiHelp"));

var _AppBarMenu = _interopRequireDefault(require("./components/AppBarMenu"));

var _logo = _interopRequireDefault(require("./assets/logo"));

var _Theme = _interopRequireWildcard(require("./Theme"));

var _constants = require("./utils/constants");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/* eslint-disable @typescript-eslint/ban-types */

/** @jsx jsx */

/** @jsxFrag React.Fragment */

/* eslint-disable import/no-named-default */

/* eslint-disable @typescript-eslint/no-explicit-any */

/* eslint-disable @typescript-eslint/ban-ts-comment */
const useStyles = (0, _styles.makeStyles)(theme => ({
  root: {
    '& > *': {
      margin: theme.spacing(1)
    },
    flexGrow: 1
  },
  firstIcon: {
    paddingLeft: 70
  },
  labelContainer: {
    width: 'auto',
    padding: 0
  },
  iconLabelWrapper: {
    flexDirection: 'row'
  },
  iconLabelWrapper2: {
    flexDirection: 'row-reverse'
  },
  buttonNavTextWrap: {
    maxWidth: '250px',
    whiteSpace: 'nowrap',
    overflow: 'hidden',
    textOverflow: 'ellipsis'
  },
  labelNavTextWrap: {
    maxWidth: '100%',
    whiteSpace: 'nowrap',
    overflow: 'hidden',
    textOverflow: 'ellipsis'
  }
}));
const styleTag = document.createElement('style');
styleTag.innerHTML = [":root{--reach-tabs:1}[data-reach-tabs][data-orientation=vertical]{display:flex}[data-reach-tab-list]{display:flex;background:rgba(0,0,0,.05)}[data-reach-tab-list][aria-orientation=vertical]{flex-direction:column}[data-reach-tab]{display:inline-block;padding:.25em .5em;margin:0;border:none;border-bottom:1px solid transparent;background:none;color:inherit;font:inherit;cursor:pointer;-webkit-appearance:none;-moz-appearance:none}[data-reach-tab]:active{background:rgba(0,0,0,.05)}[data-reach-tab]:disabled{opacity:.25;cursor:default}[data-reach-tab][data-selected]{border-bottom-color:initial}"].join('\n');
document.head.prepend(styleTag); //const extrIcons = [null, CgDice1, CgDice2, CgDice3, CgDice4, CgDice5, CgDice6]
//const getDiceIcon = (number: number) => extrIcons[number] ?? FaDiceD20

function getDistanceFromTopOfPage(element) {
  let distance = 0;

  while (element) {
    distance += element.offsetTop - element.scrollTop + element.clientTop;
    element = element.offsetParent;
  }

  return distance;
}

const totallyCenteredStyles = {
  minWidth: '100%',
  minHeight: '100%',
  display: 'grid'
}; // const visuallyHiddenStyles: InterpolationWithTheme<Theme> = {
//   border: '0',
//   clip: 'rect(0 0 0 0)',
//   height: '1px',
//   margin: '-1px',
//   overflow: 'hidden',
//   padding: '0',
//   position: 'absolute',
//   width: '1px',
// }

const exerciseTypes = ['final', 'exercise', 'instruction'];

const isExerciseType = type => // .includes *should* allow you to pass any type, but it does not :-(
exerciseTypes.includes(type);

function renderReactApp({
  history,
  projectTitle,
  filesInfo,
  lazyComponents,
  gitHubRepoUrl,
  render
}) {
  //
  const splitTitle = gitHubRepoUrl.split('/');
  const projectIdFromGithub = splitTitle[splitTitle.length - 1];
  window.localStorage.setItem(_constants.QCM_CURRENT_PROJECT_ID, projectIdFromGithub);

  const useTheme = () => (0, _emotionTheming.useTheme)();

  const exerciseInfo = [];

  for (const fileInfo of filesInfo) {
    const type = fileInfo.type;

    if (isExerciseType(type)) {
      var _exerciseInfo$fileInf;

      exerciseInfo[fileInfo.number] = (_exerciseInfo$fileInf = exerciseInfo[fileInfo.number]) != null ? _exerciseInfo$fileInf : {
        exercise: [],
        final: []
      };
      const info = exerciseInfo[fileInfo.number];

      if (type === 'instruction') {
        info.instruction = fileInfo;
        const {
          title,
          number,
          id,
          description
        } = fileInfo;
        Object.assign(info, {
          title,
          number,
          id,
          description
        });
      } else {
        info[type].push(fileInfo);
      }
    }
  }

  for (const info of exerciseInfo.filter(Boolean)) {
    info.next = exerciseInfo[info.number + 1];
    info.previous = exerciseInfo[info.number - 1];
  }

  const mq = (0, _facepaint.default)(['@media(min-width: 576px)', '@media(min-width: 768px)', '@media(min-width: 992px)', '@media(min-width: 1200px)']);

  const tabStyles = ({
    theme
  }) => ({
    background: theme.backgroundLight,
    borderTop: `1px solid ${theme.sky}`,
    height: '100%',
    position: 'relative',
    h3: {
      fontSize: '0.5em'
    },
    zIndex: 10,
    '[data-reach-tab]': {
      padding: '0.5rem 1.25rem',
      ':hover': {
        color: theme.primary
      }
    },
    '[data-reach-tab][data-selected]': {
      background: theme.backgroundLight,
      border: 'none',
      svg: {
        fill: theme.primary,
        color: theme.primary
      },
      ':hover': {
        color: 'inherit'
      }
    }
  });

  function FileTabs({
    isOpen,
    files
  }) {
    const theme = useTheme();
    const classes = useStyles();

    const [tabIndex, setTabIndex] = _react.default.useState(0);

    const renderedTabs = _react.default.useRef();

    if (!renderedTabs.current) {
      renderedTabs.current = new Set([0]);
    }

    function handleTabChange(index) {
      var _renderedTabs$current;

      setTabIndex(index);
      (_renderedTabs$current = renderedTabs.current) == null ? void 0 : _renderedTabs$current.add(index);
    }

    const handleChange = (event, newValue) => {
      var _renderedTabs$current2;

      //console.log('handleChange', event)
      setTabIndex(newValue);
      (_renderedTabs$current2 = renderedTabs.current) == null ? void 0 : _renderedTabs$current2.add(newValue);
    };

    const filesToTabs = () => {
      const tabs = files.map(({
        id,
        filename,
        extraCreditNumber = -1,
        isExtraCredit,
        type
      }) => {
        //console.log('filesToTabs id', id)
        if (isExtraCredit) {
          return (0, _core.jsx)(_Tab.default, {
            key: id,
            label: `Bonus ${extraCreditNumber}`,
            icon: (0, _core.jsx)(_md.MdDns, {
              size: "20",
              color: theme.textLightest,
              css: {
                marginRight: 5
              }
            }),
            classes: {
              wrapper: classes.iconLabelWrapper
            }
          });
        } else if (type === 'final') {
          return (0, _core.jsx)(_Tab.default, {
            key: id,
            label: `Solution`,
            icon: (0, _core.jsx)(_md.MdCheckCircle, {
              size: "20",
              color: theme.textLightest,
              css: {
                marginRight: 5
              }
            }),
            classes: {
              wrapper: classes.iconLabelWrapper
            }
          });
        } else if (type === 'exercise') {
          return (0, _core.jsx)(_Tab.default, {
            key: id,
            label: `Exercice`,
            icon: (0, _core.jsx)(_md.MdLaptop, {
              size: "20",
              color: theme.textLightest,
              css: {
                marginRight: 5
              }
            }),
            classes: {
              wrapper: classes.iconLabelWrapper
            }
          });
        } else {
          return (0, _core.jsx)(_Tab.default, {
            key: id,
            label: `else ${filename}`,
            icon: (0, _core.jsx)(_md.MdLaptop, {
              size: "20",
              color: theme.textLightest,
              css: {
                marginRight: 5
              }
            }),
            classes: {
              wrapper: classes.iconLabelWrapper
            }
          });
        }
      });
      return tabs;
    };

    if (files.length == 1) {
      const {
        title,
        extraCreditTitle,
        isolatedPath
      } = files[0];
      return (0, _core.jsx)(Sandbox, {
        isOpen: isOpen,
        isolatedPath: isolatedPath,
        isolatedPathLinkContent: "Ouvrir dans une page \xE0 part",
        title: extraCreditTitle != null ? extraCreditTitle : title
      }, renderedTabs.current.has(0) ? (0, _core.jsx)("iframe", {
        title: extraCreditTitle != null ? extraCreditTitle : title,
        src: isolatedPath,
        css: {
          border: 'none',
          width: '100%',
          height: '100%'
        }
      }) : null);
    }

    return isOpen ? (0, _core.jsx)(_tabs.Tabs, {
      index: tabIndex,
      onChange: handleTabChange,
      css: tabStyles({
        theme
      })
    }, (0, _core.jsx)(_Tabs.default
    /*className={classes.root}*/
    , {
      value: tabIndex,
      indicatorColor: "secondary",
      textColor: "secondary",
      onChange: handleChange,
      "aria-label": "disabled tabs example"
    }, filesToTabs()), (0, _core.jsx)(_tabs.TabPanels, null, files.map(({
      title,
      extraCreditTitle,
      isolatedPath,
      id
    }, index) => {
      var _renderedTabs$current3;

      return (0, _core.jsx)(_tabs.TabPanel, {
        key: id
      }, (0, _core.jsx)(Sandbox, {
        isOpen: tabIndex === index,
        isolatedPath: isolatedPath,
        isolatedPathLinkContent: "Ouvrir dans une page \xE0 part",
        title: extraCreditTitle != null ? extraCreditTitle : title
      }, (_renderedTabs$current3 = renderedTabs.current) != null && _renderedTabs$current3.has(0) ? (0, _core.jsx)("iframe", {
        title: extraCreditTitle != null ? extraCreditTitle : title,
        src: isolatedPath,
        css: {
          border: 'none',
          width: '100%',
          height: '100%'
        }
      }) : null));
    }))) : null;
  }

  FileTabs.displayName = 'FileTabs';

  function Sandbox({
    isOpen,
    isolatedPath,
    isolatedPathLinkContent,
    title,
    children
  }) {
    const renderContainerRef = _react.default.useRef(null);

    const [height, setHeight] = _react.default.useState(0);

    _react.default.useLayoutEffect(() => {
      if (isOpen) {
        setHeight(getDistanceFromTopOfPage(renderContainerRef.current));
      }
    }, [isOpen]);

    return (0, _core.jsx)(_react.default.Fragment, null, (0, _core.jsx)("br", null), (0, _core.jsx)("div", {
      css: {
        display: 'flex',
        justifyContent: 'space-between',
        width: '100%',
        padding: '1rem'
      }
    }, title ? (0, _core.jsx)("div", {
      css: {
        /* minWidth: '400px',*/
      }
    }, (0, _core.jsx)(_Alert.default, {
      variant: "outlined",
      severity: "info"
    }, (0, _core.jsx)(_AlertTitle.default, null, "Sp\xE9cificit\xE9 de l'exercice bonus"), title)) : null, (0, _core.jsx)("a", {
      css: {
        textDecoration: 'none'
      },
      href: isolatedPath,
      target: "_blank",
      rel: "noreferrer"
    }, (0, _core.jsx)(_Button.default, {
      variant: "outlined"
    }, isolatedPathLinkContent))), (0, _core.jsx)("div", {
      ref: renderContainerRef,
      css: [totallyCenteredStyles, mq({
        color: '#19212a',
        background: 'white',
        minHeight: 500,
        height: ['auto', 'auto', `calc(100vh - ${height}px)`],
        overflowY: ['auto', 'auto', 'scroll']
      })]
    }, (0, _core.jsx)("div", {
      className: "final-container render-container"
    }, children)));
  }

  Sandbox.displayName = 'Sandbox';

  function ExerciseContainer(props) {
    const theme = useTheme();
    const classes = useStyles();
    const {
      exerciseNumber: exerciseNumberString
    } = (0, _reactRouterDom.useParams)();
    const exerciseNumber = Number(exerciseNumberString);

    const [tabIndex, setTabIndex] = _react.default.useState(0);

    const renderedTabs = _react.default.useRef();

    if (!renderedTabs.current) {
      renderedTabs.current = new Set([0]);
    }

    function handleTabChange(index) {
      var _renderedTabs$current4;

      //console.log('handleTabChange', index)
      setTabIndex(index);
      (_renderedTabs$current4 = renderedTabs.current) == null ? void 0 : _renderedTabs$current4.add(index);
    } // allow the user to continue to the next exercise with the left/right keys


    _react.default.useEffect(() => {
      const handleKeyup = e => {
        if (e.target !== document.body) return;

        if (e.key === 'ArrowRight') {
          const {
            number
          } = exerciseInfo[exerciseNumber + 1] || exerciseInfo[1];
          history.push(`/${number}`);
        } else if (e.key === 'ArrowLeft') {
          const {
            number
          } = exerciseInfo[exerciseNumber - 1] || exerciseInfo[exerciseInfo.length - 1];
          history.push(`/${number}`);
        }
      };

      document.body.addEventListener('keyup', handleKeyup);
      return () => document.body.removeEventListener('keyup', handleKeyup);
    }, [exerciseNumber]);

    if (isNaN(exerciseNumber) || !exerciseInfo[exerciseNumber]) {
      return (0, _core.jsx)(NotFound, null);
    }

    const {
      instruction,
      exercise,
      final
    } = exerciseInfo[exerciseNumber];
    let instructionElement;
    const comp = lazyComponents[instruction.id]; //console.log('instruction.id', comp)

    if (comp) {
      instructionElement = /*#__PURE__*/_react.default.createElement(comp);
    }

    const handleChange = (event, newValue) => {
      var _renderedTabs$current5;

      //console.log('handleChange', newValue)
      setTabIndex(newValue);
      (_renderedTabs$current5 = renderedTabs.current) == null ? void 0 : _renderedTabs$current5.add(newValue);
    };

    return (0, _core.jsx)(_react.default.Fragment, null, (0, _core.jsx)(Navigation, {
      exerciseNumber: exerciseNumber,
      mode: props.mode,
      setMode: props.setMode
    }), (0, _core.jsx)("div", {
      css: {
        minHeight: 'calc(100vh - 60px)'
      }
    }, (0, _core.jsx)("div", {
      css: mq({
        display: 'grid',
        gridTemplateColumns: ['100%', '100%', '50% 50%'],
        gridTemplateRows: 'auto'
      })
    }, (0, _core.jsx)("div", {
      css: mq({
        position: 'relative',
        gridRow: [2, 2, 'auto'],
        height: ['auto', 'auto', 'calc(100vh - 60px)'],
        overflowY: ['auto', 'auto', 'scroll'],
        padding: '1rem 2rem 3rem 2rem',
        borderTop: `1px solid ${theme.sky}`,
        '::-webkit-scrollbar': {
          background: theme.skyLight,
          borderLeft: `1px solid ${theme.sky}`,
          borderRight: `1px solid ${theme.sky}`,
          width: 10
        },
        '::-webkit-scrollbar-thumb': {
          background: theme.skyDark
        },
        'p, li': {
          fontSize: 18,
          lineHeight: 1.5
        },
        blockquote: {
          borderLeft: `2px solid ${theme.primary}`,
          margin: 0,
          paddingLeft: '1.5rem'
        },
        pre: {
          background: theme.sky,
          fontSize: '80%',
          margin: '0 -2rem',
          padding: '2rem'
        },
        ul: {
          padding: 0,
          listStylePosition: 'inside'
        },
        'ul ul': {
          paddingLeft: '2rem'
        },
        'p > code': {
          background: theme.sky,
          color: theme.text,
          fontSize: '85%',
          padding: '3px 5px'
        }
      })
    }, (0, _core.jsx)(_react.default.Suspense, {
      fallback: (0, _core.jsx)("div", {
        css: totallyCenteredStyles
      }, "Loading...")
    }, (0, _core.jsx)("div", {
      css: {
        position: 'absolute',
        top: 20,
        right: 20,
        fontSize: '1.2rem',
        color: theme.textLightest
      }
    }), (0, _core.jsx)("div", {
      className: "instruction-container"
    }, instructionElement))), (0, _core.jsx)("div", {
      css: {
        background: theme.background
      }
    }, (0, _core.jsx)(_tabs.Tabs, {
      index: tabIndex,
      onChange: handleTabChange,
      css: tabStyles({
        theme
      })
    }, (0, _core.jsx)(_Tabs.default, {
      className: classes.root,
      value: tabIndex,
      indicatorColor: "secondary",
      textColor: "secondary",
      onChange: handleChange,
      "aria-label": "disabled tabs example"
    }, (0, _core.jsx)(_Tab.default, {
      label: (0, _core.jsx)(_Tooltip.default, {
        title: "Le rendu se fera ci-dessous"
      }, (0, _core.jsx)("span", null, "Exercice ", exerciseNumber)),
      icon: (0, _core.jsx)(_md.MdLaptop, {
        size: "20",
        color: theme.textLightest,
        css: {
          marginRight: 5
        }
      }),
      classes: {
        wrapper: classes.iconLabelWrapper
      }
    }), (0, _core.jsx)(_Tab.default, {
      label: (0, _core.jsx)(_Tooltip.default, {
        title: "Le rendu se fera ci-dessous"
      }, (0, _core.jsx)("span", null, "Solution")),
      icon: (0, _core.jsx)(_md.MdCheckCircle, {
        size: "18",
        color: theme.textLightest,
        css: {
          marginRight: 5
        }
      }),
      classes: {
        wrapper: classes.iconLabelWrapper
      }
    }), (0, _core.jsx)(_Tab.default, {
      label: (0, _core.jsx)(_Tooltip.default, {
        title: "QCM"
      }, (0, _core.jsx)("span", null, "QCM ", exerciseNumber)),
      icon: (0, _core.jsx)(_md.MdFormatListBulleted, {
        size: "20",
        color: theme.textLightest,
        css: {
          marginRight: 5
        }
      }),
      classes: {
        wrapper: classes.iconLabelWrapper
      }
    })), (0, _core.jsx)(_tabs.TabPanels, null, (0, _core.jsx)(_tabs.TabPanel, null, (0, _core.jsx)(FileTabs, {
      key: exerciseNumber,
      isOpen: tabIndex === 0,
      files: exercise
    })), (0, _core.jsx)(_tabs.TabPanel, null, (0, _core.jsx)(FileTabs, {
      key: exerciseNumber,
      isOpen: tabIndex === 1,
      files: final
    })), (0, _core.jsx)(_tabs.TabPanel, null, (0, _core.jsx)(_QcmDataLoader.default, {
      key: exerciseInfo[exerciseNumber].id,
      exerciseInfo: exerciseInfo[exerciseNumber],
      lazyComponents: lazyComponents
    }))))))));
  }

  ExerciseContainer.displayName = 'ExerciseContainer';

  function Navigation({
    exerciseNumber,
    mode,
    setMode
  }) {
    const theme = useTheme(); //const info = exerciseNumber ? exerciseInfo[exerciseNumber] : null

    const classes = useStyles(); // const [/*swithDarkMode, */setSwithDarkMode] = React.useState(
    //   mode === 'dark' ,
    // )
    // const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    //   setSwithDarkMode(event.target.checked)
    //   setMode(mode === 'light' ? 'dark' : 'light')
    //   //setState({ ...state, [event.target.name]: event.target.checked });
    // }

    return (0, _core.jsx)(_AppBarMenu.default, {
      projectTitle: projectTitle,
      theme: theme,
      history: history,
      exerciseNumber: exerciseNumber,
      mode: mode,
      setMode: setMode,
      exerciseInfo: exerciseInfo,
      classes: classes
    });
  }

  Navigation.displayName = 'Navigation';

  function Home(props) {
    return (0, _core.jsx)(_react.default.Fragment, null, (0, _core.jsx)(Navigation, {
      mode: props.mode,
      setMode: props.setMode
    }), (0, _core.jsx)("div", {
      css: mq({
        width: '100%',
        maxWidth: 800,
        minHeight: '85vh',
        margin: '0 auto',
        padding: '1rem',
        display: 'flex',
        flexDirection: 'column',
        alignItems: 'center',
        justifyContent: 'center'
      })
    }, (0, _core.jsx)(_logo.default, {
      size: 120
      /* color={theme.skyDark}*/
      ,
      strokeWidth: 0.7,
      css: mq({
        opacity: 0.5,
        marginTop: ['3rem', 0]
      })
    }), (0, _core.jsx)("h1", {
      css: mq({
        textAlign: 'center',
        marginBottom: ['4rem', '4rem'],
        marginTop: '3rem'
      })
    }, projectTitle), (0, _core.jsx)("div", {
      css: mq({
        width: '100%',
        //display: 'grid',
        gridTemplateColumns: ['auto', 'auto'],
        gridGap: '1rem'
      })
    }, (0, _core.jsx)(_VerticalLinearStepper.default, {
      exerciseInfo: exerciseInfo
    }), (0, _core.jsx)(_Divider.default, {
      variant: "middle"
    }), (0, _core.jsx)("h2", {
      style: {
        textAlign: 'center'
      }
    }, "Ils vont t'aider dans ta mission"), (0, _core.jsx)(_AccordionEmojiHelp.default, null))));
  }

  Home.displayName = 'Home';

  function NotFound() {
    const theme = useTheme();
    return (0, _core.jsx)("div", {
      css: {
        height: '100vh',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        textAlign: 'center'
      }
    }, (0, _core.jsx)("div", null, (0, _core.jsx)(_logo.default, {
      size: 120,
      color: theme.skyDark,
      strokeWidth: 0.7,
      css: {
        opacity: 0.7
      }
    }), (0, _core.jsx)("h1", null, `Désolé... Il n'y a rien ici.`), `Pour aller à un exercice, il faut aller ici `, (0, _core.jsx)("code", null, `/exerciseNumber`), `, par exemple : `, (0, _core.jsx)(_reactRouterDom.Link, {
      to: "/1"
    }, (0, _core.jsx)("code", null, `/1`)), (0, _core.jsx)("div", {
      css: {
        marginTop: '2rem',
        a: {
          textDecoration: 'none'
        }
      }
    }, (0, _core.jsx)(_reactRouterDom.Link, {
      to: "/",
      css: {
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center'
      }
    }, (0, _core.jsx)(_ri.RiArrowLeftSLine, null), "Back home"))));
  }

  NotFound.displayName = 'NotFound';

  function useDarkMode() {
    const preferDarkQuery = '(prefers-color-scheme: dark)';

    const [mode, setMode] = _react.default.useState(() => {
      const lsVal = window.localStorage.getItem('colorMode');

      if (lsVal) {
        return lsVal === 'dark' ? 'dark' : 'light';
      } else {
        return window.matchMedia(preferDarkQuery).matches ? 'dark' : 'light';
      }
    });

    _react.default.useEffect(() => {
      const mediaQuery = window.matchMedia(preferDarkQuery);

      const handleChange = () => {
        setMode(mediaQuery.matches ? 'dark' : 'light');
      };

      mediaQuery.addListener(handleChange);
      return () => mediaQuery.removeListener(handleChange);
    }, []);

    _react.default.useEffect(() => {
      window.localStorage.setItem('colorMode', mode);
    }, [mode]); // we're doing it this way instead of as an effect so we only
    // set the localStorage value if they explicitly change the default


    return [mode, setMode];
  }

  function DelayedTransition() {
    // we have it this way so dark mode is rendered immediately rather than
    // transitioning to it on initial page load.
    const [renderStyles, setRender] = _react.default.useState(false);

    _react.default.useEffect(() => {
      const timeout = setTimeout(() => {
        setRender(true);
      }, 450);
      return () => clearTimeout(timeout);
    }, []);

    return renderStyles ? (0, _core.jsx)(_core.Global, {
      styles: {
        '*, *::before, *::after': {
          // for the theme change
          transition: `background 0.4s, background-color 0.4s, border-color 0.4s`
        }
        /* h3:{fontSize:"1.1em",fontStyle:"italic"},*/

      }
    }) : null;
  }

  function App() {
    const [mode, setMode] = useDarkMode();
    const theme = (0, _Theme.default)(mode);
    const isDark = mode === 'dark';

    _react.default.useLayoutEffect(() => {
      var _document$getElementB;

      (_document$getElementB = document.getElementById('root')) == null ? void 0 : _document$getElementB.classList.add('react-course-app');
    }); //Night Owl
    //https://packagecontrol.io/packages/Night%20Owl

    /* THEME 1*/

    /* primary */
    // const mainPrimaryColor = isDark ? indigo[500] : indigo[500];
    // const lightPrimaryColor = isDark ? '#757ce8' : '#757ce8';
    // const darkPrimaryColor = isDark ? indigo[700] : indigo[700];
    // const textPrimaryColor = isDark ? '#fff' : '#fff';
    // /* secondary */
    // const mainSecondaryColor = isDark ? '#ff9900' : '#03dac6';
    // const lightSecondaryColor = isDark ?  '#03dac6' :  '#03dac6';
    // const darkSecondaryColor = isDark ? '#018786' : '#018786';
    // const textSecondaryColor = isDark ? '#fff' : '#fff';
    // //other
    // const muiPaperBgColor = isDark ? 'rgb(33, 43, 54)' : '#fff';
    // const muiAccordionBgColor = isDark ? 'rgb(33, 43, 54)' : '#fff';
    // const muiAppBarBgColor = isDark ?   'rgb(33, 43, 54)' : '#fff';
    // const muiAppBarTextColor = isDark ? '#fff' : 'rgb(33, 43, 54)';

    /* THEME 2*/


    const mainPrimaryColor = isDark ? '#3f51b5' : '#90A7B2';
    const lightPrimaryColor = isDark ? '#3f51b5' : '#90A7B2';
    const darkPrimaryColor = isDark ? '#011627  ' : '#d0d7da';
    const textPrimaryColor = isDark ? '#fff' : '#fff';
    /* secondary */

    const mainSecondaryColor = isDark ? '#BC5454' : '#BC5454';
    const lightSecondaryColor = isDark ? '#BC5454  ' : '#BC5454';
    const darkSecondaryColor = isDark ? '#ff7961' : '#BC5454';
    const textSecondaryColor = isDark ? '#fff' : '#fff'; //other
    // const colorBgGradient =
    //   'linear-gradient(to right, #191b2c 0%, #212547 100%)'

    const muiPaperBgColor = isDark ? '#011627' : '#fff';
    const muiAccordionBgColor = isDark ? '#011627' : '#fff';
    const muiAppBarBgColor = isDark ? '#011627' : '#fff';
    const muiAppBarTextColor = isDark ? '#fff' : 'rgb(33, 43, 54)';
    const themeMui = (0, _styles.createTheme)({
      palette: {
        type: mode,
        primary: {
          main: mainPrimaryColor,
          light: lightPrimaryColor,
          dark: darkPrimaryColor,
          contrastText: textPrimaryColor
        },
        secondary: {
          main: mainSecondaryColor,
          light: lightSecondaryColor,
          dark: darkSecondaryColor,
          contrastText: textSecondaryColor
        }
      },
      typography: {
        fontFamily: ['Futura', 'Century Gothic', 'sans-serif', '-apple-system', 'BlinkMacSystemFont', '"Segoe UI"', 'Roboto', '"Helvetica Neue"', 'Arial', 'sans-serif', '"Apple Color Emoji"', '"Segoe UI Emoji"', '"Segoe UI Symbol"'].join(',')
      },
      overrides: {
        MuiPaper: {
          elevation0: {
            background: muiPaperBgColor
          }
        },
        MuiAccordion: {
          root: {
            backgroundColor: muiAccordionBgColor
          }
        },
        MuiAppBar: {
          colorDefault: {
            color: muiAppBarTextColor,
            backgroundColor: muiAppBarBgColor
          },
          root: {
            backgroundColor: muiAppBarBgColor
          }
        },
        MuiToolbar: {
          dense: {
            backgroundColor: theme.backgroundLight
          }
        },
        MuiMenu: {
          paper: {
            color: muiAppBarTextColor,
            backgroundColor: muiAppBarBgColor
          }
        },
        MuiTabs: {
          /*indicator: {
            backgroundColor: orange[700]
          }*/
        }
        /*MuiTab : { 
          root: {
            "&:hover": {
              backgroundColor: orange[700],
              color: orange[700]
            }
          },
          selected: {
            
            backgroundColor: '#720885',
            color: '#720885',
            "&:hover": {
              backgroundColor: '#2e8f4b',
              color: '#4d2020'
            }
          }
        },*/

      }
    });
    return (0, _core.jsx)(_styles.ThemeProvider, {
      theme: themeMui
    }, (0, _core.jsx)(_emotionTheming.ThemeProvider, {
      theme: theme
    }, (0, _core.jsx)(_reactRouterDom.Router, {
      history: history
    }, (0, _core.jsx)(_reactRouterDom.Switch, null, (0, _core.jsx)(_reactRouterDom.Route, {
      exact: true,
      path: "/"
    }, (0, _core.jsx)(Home, {
      mode: mode,
      setMode: setMode
    })), (0, _core.jsx)(_reactRouterDom.Route, {
      exact: true,
      path: "/:exerciseNumber(\\d+)"
    }, (0, _core.jsx)(ExerciseContainer, {
      mode: mode,
      setMode: setMode
    })), (0, _core.jsx)(_reactRouterDom.Route, null, (0, _core.jsx)(NotFound, null)))), (0, _core.jsx)(_core.Global, {
      styles: {
        'html, body, #root': {
          background: theme.background,
          color: theme.text
        },
        '::selection': {
          background: theme.primary,
          color: 'white'
        },
        '[data-reach-tab]': {
          cursor: 'pointer'
        },
        a: {
          color: theme.primary
        },

        /*
        This will hide the focus indicator if the element receives focus via the mouse,
        but it will still show up on keyboard focus.
        */
        '*:focus:not(:focus-visible)': {
          outline: 'none'
        },
        hr: {
          background: theme.textLightest
        },
        'table, td, th': {
          border: '1px solid #ddd',
          textAlign: 'left'
        },
        table: {
          borderCollapse: 'collapse',
          width: '100%',
          margin: '15px'
        },
        'th, td': {
          padding: '15px'
        }
      }
    }), (0, _core.jsx)(_core.Global, {
      styles: `
              ${mode === 'light' ? _Theme.prismThemeLight : _Theme.prismThemeDark}
            `
    }), (0, _core.jsx)(DelayedTransition, null)));
  }

  function ErrorFallback({
    error,
    resetErrorBoundary
  }) {
    return (0, _core.jsx)("div", {
      css: {
        display: 'flex',
        alignItems: 'center',
        flexDirection: 'column',
        marginTop: '50px'
      }
    }, (0, _core.jsx)("p", null, "Oh no! Il y a eu une erreur!"), (0, _core.jsx)("div", null, (0, _core.jsx)("p", null, `Ici l'erreur:`), (0, _core.jsx)("pre", {
      css: {
        color: 'red',
        overflowY: 'scroll'
      }
    }, error.message)), (0, _core.jsx)("div", null, (0, _core.jsx)("p", null, "Essaye de faire une de ces choses pour corriger:"), (0, _core.jsx)("ol", null, (0, _core.jsx)("li", null, (0, _core.jsx)("button", {
      onClick: resetErrorBoundary
    }, "Rerender the app")), (0, _core.jsx)("li", null, (0, _core.jsx)("button", {
      onClick: () => window.location.reload()
    }, "Rafraichir la page")), (0, _core.jsx)("li", null, "Met \xE0 jour le code pour corriger le probl\xE8me"))));
  }

  render((0, _core.jsx)(_reactErrorBoundary.ErrorBoundary, {
    FallbackComponent: ErrorFallback
  }, (0, _core.jsx)(App, null)));
}
/*
eslint
  max-statements: "off",
  @typescript-eslint/no-non-null-assertion: "off"
*/