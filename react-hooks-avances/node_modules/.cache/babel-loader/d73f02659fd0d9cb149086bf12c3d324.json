{"ast":null,"code":"import _slicedToArray from\"/home/floslv/Flo/Dev/Learning/MikeCodeur/react-hooks-avances/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";// Hook Perso\n// http://localhost:3000/alone/exercise/04.js\nimport*as React from'react';import'../04-styles.css';// 🐶 Utilise `React.forwardRef` pour wrapper le composant avec la 'ref' parente.\n// Grace à cet référence tu pourras utiliser `useImperativeHandle`\n// 🤖 const Composant = React.forwardRef(function Composant({onsubmit} , ref) {\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function Composant(_ref){var onsubmit=_ref.onsubmit;var _React$useState=React.useState(''),_React$useState2=_slicedToArray(_React$useState,2),value=_React$useState2[0],setValue=_React$useState2[1];var inputRef=React.useRef();var buttonRef=React.useRef();// 🐶 créé une fonction 'focusInput' qui donne le focus à l'input `inputRef.current.focus()`\n// 🐶 créé une fonction 'focusButton' qui donne le focus à l'input `buttonRef.current.focus()`\n// 🤖 Utilise `React.useImperativeHandle` en utilisant la 'ref' du composant parent\n// ainsi que les deux fonctions ('focusInput','focusButton') qui utilisent les ref internes.\n//\n// React.useImperativeHandle(ref, () => ({\n//   focusInput,\n//   focusButton,\n// }))\nreturn/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"input\",{ref:inputRef,type:\"text\",value:value,onChange:function onChange(e){return setValue(e.target.value);}}),/*#__PURE__*/_jsx(\"input\",{ref:buttonRef,type:\"button\",value:'submit',onClick:function onClick(){return onsubmit(value);}})]});}function App(){var _React$useState3=React.useState(''),_React$useState4=_slicedToArray(_React$useState3,2),setValue=_React$useState4[1];var _React$useState5=React.useState(''),_React$useState6=_slicedToArray(_React$useState5,2),checked=_React$useState6[0],setChecked=_React$useState6[1];// 🐶 créé une référence avec `React.useRef()`.\n// 🤖 const composantRef = React.useRef()\n// Ajoute ensuite 'composantRef' au composant <Composant ref\n// ⛏️ décommente ces 2 fonctions\n//const focusInput = () => composantRef.current.focusInput()\n//const focusButton = () => composantRef.current.focusButton()\nvar handleCheck=function handleCheck(e){setChecked(e.target.checked);// ⛏️ décommente cette ligne pour appleler le focus boutton ou focus input.\n//e.target.checked ? focusInput() : focusButton()\n};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Composant/* 🤖 ref={composantRef}*/,{onsubmit:setValue}),/*#__PURE__*/_jsxs(\"label\",{children:[/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",checked:checked,onChange:handleCheck}),\" Focus sur input / button ?\"]})]});}export default App;","map":{"version":3,"sources":["/home/floslv/Flo/Dev/Learning/MikeCodeur/react-hooks-avances/src/exercise/05.js"],"names":["React","Composant","onsubmit","useState","value","setValue","inputRef","useRef","buttonRef","e","target","App","checked","setChecked","handleCheck"],"mappings":"mLAAA;AACA;AAEA,MAAO,GAAKA,CAAAA,KAAZ,KAAuB,OAAvB,CACA,MAAO,kBAAP,CAEA;AACA;AACA;wFACA,QAASC,CAAAA,SAAT,MAA+B,IAAXC,CAAAA,QAAW,MAAXA,QAAW,CAC7B,oBAA0BF,KAAK,CAACG,QAAN,CAAe,EAAf,CAA1B,oDAAOC,KAAP,qBAAcC,QAAd,qBACA,GAAMC,CAAAA,QAAQ,CAAGN,KAAK,CAACO,MAAN,EAAjB,CACA,GAAMC,CAAAA,SAAS,CAAGR,KAAK,CAACO,MAAN,EAAlB,CAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,mBACE,oCACE,cACE,GAAG,CAAED,QADP,CAEE,IAAI,CAAC,MAFP,CAGE,KAAK,CAAEF,KAHT,CAIE,QAAQ,CAAE,kBAAAK,CAAC,QAAIJ,CAAAA,QAAQ,CAACI,CAAC,CAACC,MAAF,CAASN,KAAV,CAAZ,EAJb,EADF,cAOE,cACE,GAAG,CAAEI,SADP,CAEE,IAAI,CAAC,QAFP,CAGE,KAAK,CAAE,QAHT,CAIE,OAAO,CAAE,yBAAMN,CAAAA,QAAQ,CAACE,KAAD,CAAd,EAJX,EAPF,GADF,CAgBD,CAED,QAASO,CAAAA,GAAT,EAAe,CACb,qBAAqBX,KAAK,CAACG,QAAN,CAAe,EAAf,CAArB,qDAASE,QAAT,qBACA,qBAA8BL,KAAK,CAACG,QAAN,CAAe,EAAf,CAA9B,qDAAOS,OAAP,qBAAgBC,UAAhB,qBAEA;AACA;AACA;AAEA;AACA;AACA;AAEA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAAAL,CAAC,CAAI,CACvBI,UAAU,CAACJ,CAAC,CAACC,MAAF,CAASE,OAAV,CAAV,CACA;AACA;AACD,CAJD,CAKA,mBACE,oCAEE,KAAC,SAAU,0BAAX,EAAsC,QAAQ,CAAEP,QAAhD,EAFF,cAGE,sCACE,cAAO,IAAI,CAAC,UAAZ,CAAuB,OAAO,CAAEO,OAAhC,CAAyC,QAAQ,CAAEE,WAAnD,EADF,iCAHF,GADF,CAUD,CAED,cAAeH,CAAAA,GAAf","sourcesContent":["// Hook Perso\n// http://localhost:3000/alone/exercise/04.js\n\nimport * as React from 'react'\nimport '../04-styles.css'\n\n// 🐶 Utilise `React.forwardRef` pour wrapper le composant avec la 'ref' parente.\n// Grace à cet référence tu pourras utiliser `useImperativeHandle`\n// 🤖 const Composant = React.forwardRef(function Composant({onsubmit} , ref) {\nfunction Composant({onsubmit}) {\n  const [value, setValue] = React.useState('')\n  const inputRef = React.useRef()\n  const buttonRef = React.useRef()\n\n  // 🐶 créé une fonction 'focusInput' qui donne le focus à l'input `inputRef.current.focus()`\n\n  // 🐶 créé une fonction 'focusButton' qui donne le focus à l'input `buttonRef.current.focus()`\n\n  // 🤖 Utilise `React.useImperativeHandle` en utilisant la 'ref' du composant parent\n  // ainsi que les deux fonctions ('focusInput','focusButton') qui utilisent les ref internes.\n  //\n  // React.useImperativeHandle(ref, () => ({\n  //   focusInput,\n  //   focusButton,\n  // }))\n\n  return (\n    <div>\n      <input\n        ref={inputRef}\n        type=\"text\"\n        value={value}\n        onChange={e => setValue(e.target.value)}\n      ></input>\n      <input\n        ref={buttonRef}\n        type=\"button\"\n        value={'submit'}\n        onClick={() => onsubmit(value)}\n      ></input>\n    </div>\n  )\n}\n\nfunction App() {\n  const [, setValue] = React.useState('')\n  const [checked, setChecked] = React.useState('')\n\n  // 🐶 créé une référence avec `React.useRef()`.\n  // 🤖 const composantRef = React.useRef()\n  // Ajoute ensuite 'composantRef' au composant <Composant ref\n\n  // ⛏️ décommente ces 2 fonctions\n  //const focusInput = () => composantRef.current.focusInput()\n  //const focusButton = () => composantRef.current.focusButton()\n\n  const handleCheck = e => {\n    setChecked(e.target.checked)\n    // ⛏️ décommente cette ligne pour appleler le focus boutton ou focus input.\n    //e.target.checked ? focusInput() : focusButton()\n  }\n  return (\n    <div>\n      {/* 🐶 n'oublie pas 'composantRef'*/}\n      <Composant /* 🤖 ref={composantRef}*/ onsubmit={setValue} />\n      <label>\n        <input type=\"checkbox\" checked={checked} onChange={handleCheck} /> Focus\n        sur input / button ?\n      </label>\n    </div>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}