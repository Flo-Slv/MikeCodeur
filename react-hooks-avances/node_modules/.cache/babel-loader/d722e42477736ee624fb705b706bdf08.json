{"ast":null,"code":"import Big from'big.js';export default function operate(numberOne,numberTwo,operation){var one=Big(numberOne||'0');var two=Big(numberTwo||(operation==='รท'||operation==='x'?'1':'0'));//If dividing or multiplying, then 1 maintains current value in cases of null\nif(operation==='+'){return one.plus(two).toString();}if(operation==='-'){return one.minus(two).toString();}if(operation==='x'){return one.times(two).toString();}if(operation==='รท'){if(two==='0'){alert('Divide by 0 error');return'0';}else{return one.div(two).toString();}}throw Error(\"Unknown operation '\".concat(operation,\"'\"));}","map":{"version":3,"sources":["/home/floslv/Flo/Dev/Learning/MikeCodeur/react-hooks-avances/src/logic/operate.js"],"names":["Big","operate","numberOne","numberTwo","operation","one","two","plus","toString","minus","times","alert","div","Error"],"mappings":"AAAA,MAAOA,CAAAA,GAAP,KAAgB,QAAhB,CAEA,cAAe,SAASC,CAAAA,OAAT,CAAiBC,SAAjB,CAA4BC,SAA5B,CAAuCC,SAAvC,CAAkD,CAC/D,GAAMC,CAAAA,GAAG,CAAGL,GAAG,CAACE,SAAS,EAAI,GAAd,CAAf,CACA,GAAMI,CAAAA,GAAG,CAAGN,GAAG,CACbG,SAAS,GAAKC,SAAS,GAAK,GAAd,EAAqBA,SAAS,GAAK,GAAnC,CAAyC,GAAzC,CAA+C,GAApD,CADI,CAAf,CAEE;AACF,GAAIA,SAAS,GAAK,GAAlB,CAAuB,CACrB,MAAOC,CAAAA,GAAG,CAACE,IAAJ,CAASD,GAAT,EAAcE,QAAd,EAAP,CACD,CACD,GAAIJ,SAAS,GAAK,GAAlB,CAAuB,CACrB,MAAOC,CAAAA,GAAG,CAACI,KAAJ,CAAUH,GAAV,EAAeE,QAAf,EAAP,CACD,CACD,GAAIJ,SAAS,GAAK,GAAlB,CAAuB,CACrB,MAAOC,CAAAA,GAAG,CAACK,KAAJ,CAAUJ,GAAV,EAAeE,QAAf,EAAP,CACD,CACD,GAAIJ,SAAS,GAAK,GAAlB,CAAuB,CACrB,GAAIE,GAAG,GAAK,GAAZ,CAAiB,CACfK,KAAK,CAAC,mBAAD,CAAL,CACA,MAAO,GAAP,CACD,CAHD,IAGO,CACL,MAAON,CAAAA,GAAG,CAACO,GAAJ,CAAQN,GAAR,EAAaE,QAAb,EAAP,CACD,CACF,CACD,KAAMK,CAAAA,KAAK,8BAAuBT,SAAvB,MAAX,CACD","sourcesContent":["import Big from 'big.js'\n\nexport default function operate(numberOne, numberTwo, operation) {\n  const one = Big(numberOne || '0')\n  const two = Big(\n    numberTwo || (operation === 'รท' || operation === 'x' ? '1' : '0'),\n  ) //If dividing or multiplying, then 1 maintains current value in cases of null\n  if (operation === '+') {\n    return one.plus(two).toString()\n  }\n  if (operation === '-') {\n    return one.minus(two).toString()\n  }\n  if (operation === 'x') {\n    return one.times(two).toString()\n  }\n  if (operation === 'รท') {\n    if (two === '0') {\n      alert('Divide by 0 error')\n      return '0'\n    } else {\n      return one.div(two).toString()\n    }\n  }\n  throw Error(`Unknown operation '${operation}'`)\n}\n"]},"metadata":{},"sourceType":"module"}