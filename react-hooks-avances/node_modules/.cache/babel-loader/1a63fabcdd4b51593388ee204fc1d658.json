{"ast":null,"code":"// useReducer\n// http://localhost:3000/alone/exercise/01.js\n/* eslint-disable no-unused-vars */import*as React from'react';// 🐶 retourne la bonne valeur dans le 'reducer'\n// On veut avoir le meme comportement que 'useState'\n// la valeur retournée du 'reducer' doit etre le nouveau 'state'\nimport{jsx as _jsx}from\"react/jsx-runtime\";var reducer=function reducer(prevState,newState){};function Compteur(){// 🐶 créé un hook 'useReducer' qui utilise la fonction 'reducer' crée plus haut et 0 en valeur par défaut\n// 🤖 const [count, setCount] = React.useReducer\n// 🐶 Utilise le state `count` pour la value du input\n// 🐶 Utilise `setCount(count + 1)` pour le 'onClick'\nreturn/*#__PURE__*/_jsx(\"input\",{type:\"button\",onClick:function onClick(){},value:0});}function App(){return/*#__PURE__*/_jsx(Compteur,{});}export default App;","map":{"version":3,"sources":["/home/floslv/Flo/Dev/Learning/MikeCodeur/react-hooks-avances/src/exercise/01.js"],"names":["React","reducer","prevState","newState","Compteur","App"],"mappings":"AAAA;AACA;AAEA,mCACA,MAAO,GAAKA,CAAAA,KAAZ,KAAuB,OAAvB,CAEA;AACA;AACA;2CACA,GAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACC,SAAD,CAAYC,QAAZ,CAAyB,CAAE,CAA3C,CAEA,QAASC,CAAAA,QAAT,EAAoB,CAClB;AACA;AAEA;AACA;AACA,mBAAO,cAAO,IAAI,CAAC,QAAZ,CAAqB,OAAO,CAAE,kBAAM,CAAE,CAAtC,CAAwC,KAAK,CAAE,CAA/C,EAAP,CACD,CAED,QAASC,CAAAA,GAAT,EAAe,CACb,mBAAO,KAAC,QAAD,IAAP,CACD,CAED,cAAeA,CAAAA,GAAf","sourcesContent":["// useReducer\n// http://localhost:3000/alone/exercise/01.js\n\n/* eslint-disable no-unused-vars */\nimport * as React from 'react'\n\n// 🐶 retourne la bonne valeur dans le 'reducer'\n// On veut avoir le meme comportement que 'useState'\n// la valeur retournée du 'reducer' doit etre le nouveau 'state'\nconst reducer = (prevState, newState) => {}\n\nfunction Compteur() {\n  // 🐶 créé un hook 'useReducer' qui utilise la fonction 'reducer' crée plus haut et 0 en valeur par défaut\n  // 🤖 const [count, setCount] = React.useReducer\n\n  // 🐶 Utilise le state `count` pour la value du input\n  // 🐶 Utilise `setCount(count + 1)` pour le 'onClick'\n  return <input type=\"button\" onClick={() => {}} value={0} />\n}\n\nfunction App() {\n  return <Compteur />\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}