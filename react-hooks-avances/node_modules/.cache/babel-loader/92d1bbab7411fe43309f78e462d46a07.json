{"ast":null,"code":"import _slicedToArray from\"/home/floslv/Flo/Dev/Learning/MikeCodeur/react-hooks-avances/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";// Hook Perso\n// http://localhost:3000/alone/exercise/02.js\n/* eslint-disable no-unused-vars */import*as React from'react';import{ErrorBoundary}from'react-error-boundary';import{fetchMarvel,MarvelPersoView,MarvelSearchForm,ErrorDisplay}from'../marvel';import'../02-styles.css';// 🐶 créé un hook personnalisé 'useMarvelExist' qui va appeler l'api.\n// Ce hook retournera le state 'exist' à true si api retourne un marvel\n// Il retournera  à false si 'fetchMarvel' lève une erreur\nimport{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";function useMarvelExist(marvelName){// 🐶 créé un state 'exist'\nvar _React$useState=React.useState(false),_React$useState2=_slicedToArray(_React$useState,2),exist=_React$useState2[0],setExist=_React$useState2[1];React.useEffect(function(){if(!marvelName){return;}// 🐶 gère l'appel de l'api\n// fetchMarvel(marvelName)\n//   .then(() => /* met le state exist à true */)\n//   .catch(() => /* met le state exist à false */)\n// 🐶 n'oublie pas les dependances et désactive le warning ESLint\n// eslint-disable-next-line react-hooks/exhaustive-deps\n},[]);return exist;}function Marvel(_ref){var marvelName=_ref.marvelName;// ⛏️ remplace false par le hook personnalisé\n// 🤖 `useMarvelExist(marvelName)`\nvar marvelExist=false;return/*#__PURE__*/_jsxs(\"div\",{children:[\" \",marvelExist?\"Le marvel existe\":\"Le marvel n'existe pas\"]});}function App(){var _React$useState3=React.useState(''),_React$useState4=_slicedToArray(_React$useState3,2),marvelName=_React$useState4[0],setMarvelName=_React$useState4[1];var handleSearch=function handleSearch(name){setMarvelName(name);};return/*#__PURE__*/_jsxs(\"div\",{className:\"marvel-app\",children:[/*#__PURE__*/_jsx(MarvelSearchForm,{marvelName:marvelName,onSearch:handleSearch}),/*#__PURE__*/_jsx(\"div\",{className:\"marvel-detail\",children:/*#__PURE__*/_jsx(ErrorBoundary,{FallbackComponent:ErrorDisplay,children:/*#__PURE__*/_jsx(Marvel,{marvelName:marvelName})},marvelName)})]});}export default App;","map":{"version":3,"sources":["/home/floslv/Flo/Dev/Learning/MikeCodeur/react-hooks-avances/src/exercise/02.js"],"names":["React","ErrorBoundary","fetchMarvel","MarvelPersoView","MarvelSearchForm","ErrorDisplay","useMarvelExist","marvelName","useState","exist","setExist","useEffect","Marvel","marvelExist","App","setMarvelName","handleSearch","name"],"mappings":"mLAAA;AACA;AAEA,mCACA,MAAO,GAAKA,CAAAA,KAAZ,KAAuB,OAAvB,CACA,OAAQC,aAAR,KAA4B,sBAA5B,CACA,OACEC,WADF,CAEEC,eAFF,CAGEC,gBAHF,CAIEC,YAJF,KAKO,WALP,CAMA,MAAO,kBAAP,CAEA;AACA;AACA;wFACA,QAASC,CAAAA,cAAT,CAAwBC,UAAxB,CAAoC,CAClC;AACA,oBAA0BP,KAAK,CAACQ,QAAN,CAAe,KAAf,CAA1B,oDAAOC,KAAP,qBAAcC,QAAd,qBAEAV,KAAK,CAACW,SAAN,CAAgB,UAAM,CACpB,GAAI,CAACJ,UAAL,CAAiB,CACf,OACD,CACD;AACA;AACA;AACA;AAEA;AACA;AACD,CAXD,CAWG,EAXH,EAaA,MAAOE,CAAAA,KAAP,CACD,CAED,QAASG,CAAAA,MAAT,MAA8B,IAAbL,CAAAA,UAAa,MAAbA,UAAa,CAC5B;AACA;AACA,GAAMM,CAAAA,WAAW,CAAG,KAApB,CACA,mBACE,2BAAOA,WAAW,4CAAlB,GADF,CAGD,CAED,QAASC,CAAAA,GAAT,EAAe,CACb,qBAAoCd,KAAK,CAACQ,QAAN,CAAe,EAAf,CAApC,qDAAOD,UAAP,qBAAmBQ,aAAnB,qBACA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAAAC,IAAI,CAAI,CAC3BF,aAAa,CAACE,IAAD,CAAb,CACD,CAFD,CAGA,mBACE,aAAK,SAAS,CAAC,YAAf,wBACE,KAAC,gBAAD,EAAkB,UAAU,CAAEV,UAA9B,CAA0C,QAAQ,CAAES,YAApD,EADF,cAEE,YAAK,SAAS,CAAC,eAAf,uBACE,KAAC,aAAD,EAAgC,iBAAiB,CAAEX,YAAnD,uBACE,KAAC,MAAD,EAAQ,UAAU,CAAEE,UAApB,EADF,EAAoBA,UAApB,CADF,EAFF,GADF,CAUD,CAED,cAAeO,CAAAA,GAAf","sourcesContent":["// Hook Perso\n// http://localhost:3000/alone/exercise/02.js\n\n/* eslint-disable no-unused-vars */\nimport * as React from 'react'\nimport {ErrorBoundary} from 'react-error-boundary'\nimport {\n  fetchMarvel,\n  MarvelPersoView,\n  MarvelSearchForm,\n  ErrorDisplay,\n} from '../marvel'\nimport '../02-styles.css'\n\n// 🐶 créé un hook personnalisé 'useMarvelExist' qui va appeler l'api.\n// Ce hook retournera le state 'exist' à true si api retourne un marvel\n// Il retournera  à false si 'fetchMarvel' lève une erreur\nfunction useMarvelExist(marvelName) {\n  // 🐶 créé un state 'exist'\n  const [exist, setExist] = React.useState(false)\n\n  React.useEffect(() => {\n    if (!marvelName) {\n      return\n    }\n    // 🐶 gère l'appel de l'api\n    // fetchMarvel(marvelName)\n    //   .then(() => /* met le state exist à true */)\n    //   .catch(() => /* met le state exist à false */)\n\n    // 🐶 n'oublie pas les dependances et désactive le warning ESLint\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  return exist\n}\n\nfunction Marvel({marvelName}) {\n  // ⛏️ remplace false par le hook personnalisé\n  // 🤖 `useMarvelExist(marvelName)`\n  const marvelExist = false\n  return (\n    <div> {marvelExist ? `Le marvel existe` : `Le marvel n'existe pas`}</div>\n  )\n}\n\nfunction App() {\n  const [marvelName, setMarvelName] = React.useState('')\n  const handleSearch = name => {\n    setMarvelName(name)\n  }\n  return (\n    <div className=\"marvel-app\">\n      <MarvelSearchForm marvelName={marvelName} onSearch={handleSearch} />\n      <div className=\"marvel-detail\">\n        <ErrorBoundary key={marvelName} FallbackComponent={ErrorDisplay}>\n          <Marvel marvelName={marvelName} />\n        </ErrorBoundary>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}