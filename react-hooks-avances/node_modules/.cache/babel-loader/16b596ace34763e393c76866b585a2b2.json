{"ast":null,"code":"import Big from'big.js';import operate from'./operate';import isNumber from'./isNumber';/**\n * Given a button name and a calculator data object, return an updated\n * calculator data object.\n *\n * Calculator data object contains:\n *   total:String      the running total\n *   next:String       the next number to be operated on with the total\n *   operation:String  +, -, etc.\n */export default function calculate(obj,buttonName){//console.log(\"prevous states\",obj)\nif(buttonName==='AC'){return{total:null,next:null,operation:null};}if(isNumber(buttonName)){if(buttonName==='0'&&obj.next==='0'){return{};}// If there is an operation, update next\nif(obj.operation){if(obj.next){return{next:obj.next+buttonName};}return{next:buttonName};}// If there is no operation, update next and clear the value\nif(obj.next){var next=obj.next==='0'?buttonName:obj.next+buttonName;return{next:next,total:null};}return{next:buttonName,total:null};}if(buttonName==='%'){if(obj.operation&&obj.next){var result=operate(obj.total,obj.next,obj.operation);return{total:Big(result).div(Big('100')).toString(),next:null,operation:null};}if(obj.next){return{next:Big(obj.next).div(Big('100')).toString()};}return{};}if(buttonName==='.'){if(obj.next){// ignore a . if the next number already has one\nif(obj.next.includes('.')){return{};}return{next:obj.next+'.'};}return{next:'0.'};}if(buttonName==='='){if(obj.next&&obj.operation){return{total:operate(obj.total,obj.next,obj.operation),next:null,operation:null};}else{// '=' with no operation, nothing to do\nreturn{};}}if(buttonName==='+/-'){if(obj.next){return{next:(-1*parseFloat(obj.next)).toString()};}if(obj.total){return{total:(-1*parseFloat(obj.total)).toString()};}return{};}// Button must be an operation\n// When the user presses an operation button without having entered\n// a number first, do nothing.\n// if (!obj.next && !obj.total) {\n//   return {};\n// }\n// User pressed an operation button and there is an existing operation\nif(obj.operation){return{total:operate(obj.total,obj.next,obj.operation),next:null,operation:buttonName};}// no operation yet, but the user typed one\n// The user hasn't typed a number yet, just save the operation\nif(!obj.next){return{operation:buttonName};}// save the operation and shift 'next' into 'total'\nreturn{total:obj.next,next:null,operation:buttonName};}","map":{"version":3,"sources":["/home/floslv/Flo/Dev/Learning/MikeCodeur/react-hooks-avances/src/logic/calculate.js"],"names":["Big","operate","isNumber","calculate","obj","buttonName","total","next","operation","result","div","toString","includes","parseFloat"],"mappings":"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","sourcesContent":["import Big from 'big.js'\n\nimport operate from './operate'\nimport isNumber from './isNumber'\n\n/**\n * Given a button name and a calculator data object, return an updated\n * calculator data object.\n *\n * Calculator data object contains:\n *   total:String      the running total\n *   next:String       the next number to be operated on with the total\n *   operation:String  +, -, etc.\n */\nexport default function calculate(obj, buttonName) {\n  //console.log(\"prevous states\",obj)\n  if (buttonName === 'AC') {\n    return {\n      total: null,\n      next: null,\n      operation: null,\n    }\n  }\n\n  if (isNumber(buttonName)) {\n    if (buttonName === '0' && obj.next === '0') {\n      return {}\n    }\n    // If there is an operation, update next\n    if (obj.operation) {\n      if (obj.next) {\n        return {next: obj.next + buttonName}\n      }\n      return {next: buttonName}\n    }\n    // If there is no operation, update next and clear the value\n    if (obj.next) {\n      const next = obj.next === '0' ? buttonName : obj.next + buttonName\n      return {\n        next,\n        total: null,\n      }\n    }\n    return {\n      next: buttonName,\n      total: null,\n    }\n  }\n\n  if (buttonName === '%') {\n    if (obj.operation && obj.next) {\n      const result = operate(obj.total, obj.next, obj.operation)\n      return {\n        total: Big(result).div(Big('100')).toString(),\n        next: null,\n        operation: null,\n      }\n    }\n    if (obj.next) {\n      return {\n        next: Big(obj.next).div(Big('100')).toString(),\n      }\n    }\n    return {}\n  }\n\n  if (buttonName === '.') {\n    if (obj.next) {\n      // ignore a . if the next number already has one\n      if (obj.next.includes('.')) {\n        return {}\n      }\n      return {next: obj.next + '.'}\n    }\n    return {next: '0.'}\n  }\n\n  if (buttonName === '=') {\n    if (obj.next && obj.operation) {\n      return {\n        total: operate(obj.total, obj.next, obj.operation),\n        next: null,\n        operation: null,\n      }\n    } else {\n      // '=' with no operation, nothing to do\n      return {}\n    }\n  }\n\n  if (buttonName === '+/-') {\n    if (obj.next) {\n      return {next: (-1 * parseFloat(obj.next)).toString()}\n    }\n    if (obj.total) {\n      return {total: (-1 * parseFloat(obj.total)).toString()}\n    }\n    return {}\n  }\n\n  // Button must be an operation\n\n  // When the user presses an operation button without having entered\n  // a number first, do nothing.\n  // if (!obj.next && !obj.total) {\n  //   return {};\n  // }\n\n  // User pressed an operation button and there is an existing operation\n  if (obj.operation) {\n    return {\n      total: operate(obj.total, obj.next, obj.operation),\n      next: null,\n      operation: buttonName,\n    }\n  }\n\n  // no operation yet, but the user typed one\n\n  // The user hasn't typed a number yet, just save the operation\n  if (!obj.next) {\n    return {operation: buttonName}\n  }\n\n  // save the operation and shift 'next' into 'total'\n  return {\n    total: obj.next,\n    next: null,\n    operation: buttonName,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}